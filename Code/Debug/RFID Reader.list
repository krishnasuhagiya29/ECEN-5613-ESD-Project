
RFID Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c54  08003c54  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c54  08003c54  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200000a4  08003d00  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08003d00  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003628  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011fc  00000000  00000000  0002373f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00024940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000275  00000000  00000000  00024cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010ff7  00000000  00000000  00024f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000698c  00000000  00000000  00035f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005632f  00000000  00000000  0003c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001498  00000000  00000000  00092c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000940b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003190 	.word	0x08003190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08003190 	.word	0x08003190

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <USART2_init>:

#ifdef DEBUG

#include "UART.h"

void USART2_init(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 17);
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <USART2_init+0x5c>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b8:	4a14      	ldr	r2, [pc, #80]	; (800030c <USART2_init+0x5c>)
 80002ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002be:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1 << 0);
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <USART2_init+0x5c>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <USART2_init+0x5c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <USART2_init+0x60>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <USART2_init+0x60>)
 80002d2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002d6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (7 << 8) | (7 << 12);
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <USART2_init+0x60>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <USART2_init+0x60>)
 80002de:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80002e2:	6213      	str	r3, [r2, #32]

	USART2->CR1 &= ~USART_CR1_UE;
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <USART2_init+0x64>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <USART2_init+0x64>)
 80002ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002ee:	60d3      	str	r3, [r2, #12]
	USART2->BRR = 0X0683;  //9600 Baud rate 16 MHz
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <USART2_init+0x64>)
 80002f2:	f240 6283 	movw	r2, #1667	; 0x683
 80002f6:	609a      	str	r2, [r3, #8]
	//(int)(SystemCoreClock / (16*UART.baudrate)) << 4;

	USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <USART2_init+0x64>)
 80002fa:	f242 020c 	movw	r2, #8204	; 0x200c
 80002fe:	60da      	str	r2, [r3, #12]

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40020000 	.word	0x40020000
 8000314:	40004400 	.word	0x40004400

08000318 <USART2_transmit>:

char USART2_transmit(char input) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->SR & USART_SR_TXE))
 8000322:	bf00      	nop
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <USART2_transmit+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <USART2_transmit+0xc>
		;
	USART2->DR = input;  //mask by 0XFF?
 8000330:	4a04      	ldr	r2, [pc, #16]	; (8000344 <USART2_transmit+0x2c>)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	6053      	str	r3, [r2, #4]
	return input;
 8000336:	79fb      	ldrb	r3, [r7, #7]
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40004400 	.word	0x40004400

08000348 <USART2_string_transmit>:
		;
	return (char) USART2->DR;

}

void USART2_string_transmit(char *text) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	while (*text)
 8000350:	e006      	b.n	8000360 <USART2_string_transmit+0x18>
		USART2_transmit(*text++);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffdc 	bl	8000318 <USART2_transmit>
	while (*text)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d1f4      	bne.n	8000352 <USART2_string_transmit+0xa>
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <beeper_init>:
*/

#include "beeper.h"
#include "delay.h"

void beeper_init(void) {
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	/* Enable the AHB clock for GPIO port D */
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <beeper_init+0x20>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <beeper_init+0x20>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Port D as output */
	GPIOD->MODER = 0X14;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <beeper_init+0x24>)
 8000386:	2214      	movs	r2, #20
 8000388:	601a      	str	r2, [r3, #0]

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40023800 	.word	0x40023800
 8000398:	40020c00 	.word	0x40020c00

0800039c <beeper_enable>:

void beeper_enable(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	/* Turn ON the Buzzer */
	GPIOD->BSRR |= GPIO_BSRR_BS2;
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <beeper_enable+0x28>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <beeper_enable+0x28>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]

	delay(50);
 80003ac:	2032      	movs	r0, #50	; 0x32
 80003ae:	f000 f84f 	bl	8000450 <delay>

	/* Turn OFF the Buzzer */
	GPIOD->BSRR |= GPIO_BSRR_BR2;
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <beeper_enable+0x28>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a03      	ldr	r2, [pc, #12]	; (80003c4 <beeper_enable+0x28>)
 80003b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003bc:	6193      	str	r3, [r2, #24]
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020c00 	.word	0x40020c00

080003c8 <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header
#include "delay.h"

volatile uint32_t ms, rms;

void systick_init_ms(uint32_t freq) {
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
	__disable_irq();
	SysTick->LOAD = (freq / 1000) - 1;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <systick_init_ms+0x38>)
 80003d8:	fba2 2303 	umull	r2, r3, r2, r3
 80003dc:	099b      	lsrs	r3, r3, #6
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <systick_init_ms+0x3c>)
 80003e0:	3b01      	subs	r3, #1
 80003e2:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <systick_init_ms+0x3c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 7; //0b00000111;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <systick_init_ms+0x3c>)
 80003ec:	2207      	movs	r2, #7
 80003ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003f0:	b662      	cpsie	i
}
 80003f2:	bf00      	nop
	__enable_irq();
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	10624dd3 	.word	0x10624dd3
 8000404:	e000e010 	.word	0xe000e010

08000408 <millis>:

uint32_t millis(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
	__disable_irq();
	rms = ms; //store current ms in rms
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <millis+0x24>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <millis+0x28>)
 8000416:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000418:	b662      	cpsie	i
}
 800041a:	bf00      	nop
	__enable_irq();
	return rms;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <millis+0x28>)
 800041e:	681b      	ldr	r3, [r3, #0]
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	200000c0 	.word	0x200000c0
 8000430:	200000c4 	.word	0x200000c4

08000434 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	ms++;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Handler+0x18>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	4a03      	ldr	r2, [pc, #12]	; (800044c <SysTick_Handler+0x18>)
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	200000c0 	.word	0x200000c0

08000450 <delay>:

void delay(uint32_t ms) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t start = millis();
 8000458:	f7ff ffd6 	bl	8000408 <millis>
 800045c:	60f8      	str	r0, [r7, #12]

	do {
		;
	} while (millis() - start < ms);
 800045e:	f7ff ffd3 	bl	8000408 <millis>
 8000462:	4602      	mov	r2, r0
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d8f7      	bhi.n	800045e <delay+0xe>

}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <i2c_init>:
*
*/

#include "i2c.h"

void i2c_init(void) {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //enable gpiob clock
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <i2c_init+0x8c>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a20      	ldr	r2, [pc, #128]	; (8000504 <i2c_init+0x8c>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //enable i2c1 clock
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <i2c_init+0x8c>)
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	4a1d      	ldr	r2, [pc, #116]	; (8000504 <i2c_init+0x8c>)
 800048e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000492:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOB->MODER |= 0xA0000; //set pb8and9 to alternative function
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <i2c_init+0x90>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <i2c_init+0x90>)
 800049a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800049e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= 0x44;
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <i2c_init+0x90>)
 80004a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a4:	4a18      	ldr	r2, [pc, #96]	; (8000508 <i2c_init+0x90>)
 80004a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80004aa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->OTYPER |= GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9; //set pb8 and pb9 as open drain
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <i2c_init+0x90>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <i2c_init+0x90>)
 80004b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004b6:	6053      	str	r3, [r2, #4]
	I2C1->CR1 = I2C_CR1_SWRST;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <i2c_init+0x94>)
 80004ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004be:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <i2c_init+0x94>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <i2c_init+0x94>)
 80004c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004ca:	6013      	str	r3, [r2, #0]
	I2C1->CR2 |= 50;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <i2c_init+0x94>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <i2c_init+0x94>)
 80004d2:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 80004d6:	6053      	str	r3, [r2, #4]
	I2C1->CCR |= 0x2 | (1 << 15) | (1 << 14);
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <i2c_init+0x94>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <i2c_init+0x94>)
 80004de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE = 20; //output max rise
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <i2c_init+0x94>)
 80004ea:	2214      	movs	r2, #20
 80004ec:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= I2C_CR1_PE;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <i2c_init+0x94>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <i2c_init+0x94>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6013      	str	r3, [r2, #0]
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40023800 	.word	0x40023800
 8000508:	40020400 	.word	0x40020400
 800050c:	40005400 	.word	0x40005400

08000510 <i2c_write_byte>:

void i2c_write_byte(char saddr, char maddr, char data) {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
	while (I2C1->SR2 & I2C_SR2_BUSY) {
 8000522:	bf00      	nop
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <i2c_write_byte+0xa4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f9      	bne.n	8000524 <i2c_write_byte+0x14>
		;
	} /*wait until bus not busy*/
	I2C1->CR1 |= I2C_CR1_START; /*generate start*/
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <i2c_write_byte+0xa4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <i2c_write_byte+0xa4>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)) {
 800053c:	bf00      	nop
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <i2c_write_byte+0xa4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f9      	beq.n	800053e <i2c_write_byte+0x2e>
		;
	} /*wait until start bit is set*/
	I2C1->DR = saddr << 1; /* Send slave address*/
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	005a      	lsls	r2, r3, #1
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <i2c_write_byte+0xa4>)
 8000550:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
 8000552:	bf00      	nop
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <i2c_write_byte+0xa4>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <i2c_write_byte+0x44>
		;
	} /*wait until address flag is set*/
	if(I2C1->SR2){	/*clear SR2 by reading it */
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <i2c_write_byte+0xa4>)
 8000562:	699b      	ldr	r3, [r3, #24]

	}
	while (!(I2C1->SR1 & I2C_SR1_TXE)) {
 8000564:	bf00      	nop
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <i2c_write_byte+0xa4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <i2c_write_byte+0x56>
		;
	} /*Wait until Data register empty*/
	I2C1->DR = maddr; /* send memory address*/
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <i2c_write_byte+0xa4>)
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE)) {
 8000578:	bf00      	nop
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <i2c_write_byte+0xa4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f9      	beq.n	800057a <i2c_write_byte+0x6a>
		;
	} /*wait until data register empty*/
	I2C1->DR = data;
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <i2c_write_byte+0xa4>)
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF))
 800058c:	bf00      	nop
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <i2c_write_byte+0xa4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <i2c_write_byte+0x7e>
		; /*wait until transfer finished*/
	I2C1->CR1 |= I2C_CR1_STOP; /*Generate Stop*/
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <i2c_write_byte+0xa4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <i2c_write_byte+0xa4>)
 80005a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a4:	6013      	str	r3, [r2, #0]

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40005400 	.word	0x40005400

080005b8 <i2c_write_multi>:

void i2c_write_multi(char saddr, char maddr, char *buffer, uint8_t length) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	603a      	str	r2, [r7, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	460b      	mov	r3, r1
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY)
 80005ce:	bf00      	nop
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <i2c_write_multi+0xc0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f9      	bne.n	80005d0 <i2c_write_multi+0x18>
		;           //wait until bus not busy
	I2C1->CR1 |= I2C_CR1_START;                   //generate start
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <i2c_write_multi+0xc0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <i2c_write_multi+0xc0>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)) {
 80005e8:	bf00      	nop
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <i2c_write_multi+0xc0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <i2c_write_multi+0x32>
		;
	}					//wait until start is generated
	I2C1->DR = saddr << 1;                 	 			// Send slave address
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	005a      	lsls	r2, r3, #1
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <i2c_write_multi+0xc0>)
 80005fc:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
 80005fe:	bf00      	nop
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <i2c_write_multi+0xc0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f9      	beq.n	8000600 <i2c_write_multi+0x48>
		;
	}        //wait until address flag is set
	if(I2C1->SR2) {	//Clear SR2
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <i2c_write_multi+0xc0>)
 800060e:	699b      	ldr	r3, [r3, #24]

	}
	while (!(I2C1->SR1 & I2C_SR1_TXE))
 8000610:	bf00      	nop
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <i2c_write_multi+0xc0>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <i2c_write_multi+0x5a>
		;           //Wait until Data register empty
	I2C1->DR = maddr;                      				// send memory address
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <i2c_write_multi+0xc0>)
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE))
 8000624:	bf00      	nop
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <i2c_write_multi+0xc0>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <i2c_write_multi+0x6e>
		;           //wait until data register empty
//sending the data
	for (uint8_t i = 0; i < length; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e00f      	b.n	8000658 <i2c_write_multi+0xa0>
		I2C1->DR = buffer[i]; 			//filling buffer with command or data
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	4413      	add	r3, r2
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <i2c_write_multi+0xc0>)
 8000642:	611a      	str	r2, [r3, #16]
		while (!(I2C1->SR1 & I2C_SR1_BTF))
 8000644:	bf00      	nop
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <i2c_write_multi+0xc0>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <i2c_write_multi+0x8e>
	for (uint8_t i = 0; i < length; i++) {
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	7bfa      	ldrb	r2, [r7, #15]
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3eb      	bcc.n	8000638 <i2c_write_multi+0x80>
			;
	}

	I2C1->CR1 |= I2C_CR1_STOP;					//wait until transfer finished
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <i2c_write_multi+0xc0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <i2c_write_multi+0xc0>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066a:	6013      	str	r3, [r2, #0]

}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40005400 	.word	0x40005400

0800067c <init_keypad>:
uint32_t volatile *GPIOPullup = (uint32_t*) 0x4002080C;
uint32_t volatile *GPIOOspeed = (uint32_t*) 0x40020808;

char key_data[50] = { 0 };

void init_keypad(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

	//Base address RCC 0x4002 3800 + Address offset of RCC AHB1 = 0x30
	//Base address GPIOE 0x4002 1000 + Address offset of GPIO Moder = 0x00
	//GPIO Port o/p data register = 0x14

	*RCC_Base_Addr |= 1 << 2; //Setting the 4th bit of AHB1ENR for giving clock to port C
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <init_keypad+0x70>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <init_keypad+0x70>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f042 0204 	orr.w	r2, r2, #4
 800068e:	601a      	str	r2, [r3, #0]

	*GPIOModer &= ~(0xFF << 8); //Cols as Input , so 00 to E4,E5,E6 as input
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <init_keypad+0x74>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <init_keypad+0x74>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800069e:	601a      	str	r2, [r3, #0]

	//*GPIOModer &= ~(0xFF<<0); //Clearing the bits before setting them
	*GPIOModer |= (0x55 << 0); //01010101 to set Output for E0,E1,E2,E3 pins
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <init_keypad+0x74>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <init_keypad+0x74>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80006ae:	601a      	str	r2, [r3, #0]

	*GPIOOspeed &= ~(0xFF << 0);
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <init_keypad+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <init_keypad+0x78>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80006be:	601a      	str	r2, [r3, #0]

	*GPIOPullup &= ~(0xFF << 8);
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <init_keypad+0x7c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <init_keypad+0x7c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80006ce:	601a      	str	r2, [r3, #0]
	*GPIOPullup |= (0x15 << 8);
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <init_keypad+0x7c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <init_keypad+0x7c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f442 52a8 	orr.w	r2, r2, #5376	; 0x1500
 80006de:	601a      	str	r2, [r3, #0]

}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	2000001c 	.word	0x2000001c
 80006f8:	20000018 	.word	0x20000018

080006fc <check_key>:

char* check_key(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
//*****************************************ROW 1*********************************************************
	char ch = '\0';
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	bool button_pressed = false;
 8000706:	2300      	movs	r3, #0
 8000708:	71bb      	strb	r3, [r7, #6]
	//static unsigned int sz = 0;
	//int digit = 0;
	int i = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
	memset(key_data, 0, 50);
 800070e:	2232      	movs	r2, #50	; 0x32
 8000710:	2100      	movs	r1, #0
 8000712:	4898      	ldr	r0, [pc, #608]	; (8000974 <check_key+0x278>)
 8000714:	f001 fdd4 	bl	80022c0 <memset>

	while (1) {
		*GPIOOutput |= (0xFF << 0);
 8000718:	4b97      	ldr	r3, [pc, #604]	; (8000978 <check_key+0x27c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b96      	ldr	r3, [pc, #600]	; (8000978 <check_key+0x27c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000726:	601a      	str	r2, [r3, #0]

		*GPIOOutput &= ~(1 << 0);
 8000728:	4b93      	ldr	r3, [pc, #588]	; (8000978 <check_key+0x27c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b92      	ldr	r3, [pc, #584]	; (8000978 <check_key+0x27c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f022 0201 	bic.w	r2, r2, #1
 8000736:	601a      	str	r2, [r3, #0]

		if (!(*GPIOIntput & (1 << 4)) && !buttonState[0][0]) {
 8000738:	4b90      	ldr	r3, [pc, #576]	; (800097c <check_key+0x280>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10f      	bne.n	8000766 <check_key+0x6a>
 8000746:	4b8e      	ldr	r3, [pc, #568]	; (8000980 <check_key+0x284>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10a      	bne.n	8000766 <check_key+0x6a>
			button_pressed = true;
 8000750:	2301      	movs	r3, #1
 8000752:	71bb      	strb	r3, [r7, #6]
			ch = '1';
 8000754:	2331      	movs	r3, #49	; 0x31
 8000756:	71fb      	strb	r3, [r7, #7]
			buttonState[0][0] = 1;
 8000758:	4b89      	ldr	r3, [pc, #548]	; (8000980 <check_key+0x284>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
			delay(50); // Debounce delay
 800075e:	2032      	movs	r0, #50	; 0x32
 8000760:	f7ff fe76 	bl	8000450 <delay>
 8000764:	e009      	b.n	800077a <check_key+0x7e>

		} else if (*GPIOIntput & (1 << 4)) {
 8000766:	4b85      	ldr	r3, [pc, #532]	; (800097c <check_key+0x280>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <check_key+0x7e>
			buttonState[0][0] = 0;
 8000774:	4b82      	ldr	r3, [pc, #520]	; (8000980 <check_key+0x284>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
		}

		if (!(*GPIOIntput & (1 << 5)) && !buttonState[0][1]) {
 800077a:	4b80      	ldr	r3, [pc, #512]	; (800097c <check_key+0x280>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0320 	and.w	r3, r3, #32
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10f      	bne.n	80007a8 <check_key+0xac>
 8000788:	4b7d      	ldr	r3, [pc, #500]	; (8000980 <check_key+0x284>)
 800078a:	785b      	ldrb	r3, [r3, #1]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <check_key+0xac>
			button_pressed = true;
 8000792:	2301      	movs	r3, #1
 8000794:	71bb      	strb	r3, [r7, #6]
			ch = '2';
 8000796:	2332      	movs	r3, #50	; 0x32
 8000798:	71fb      	strb	r3, [r7, #7]
			buttonState[0][1] = 1;
 800079a:	4b79      	ldr	r3, [pc, #484]	; (8000980 <check_key+0x284>)
 800079c:	2201      	movs	r2, #1
 800079e:	705a      	strb	r2, [r3, #1]
			delay(50); // Debounce delay
 80007a0:	2032      	movs	r0, #50	; 0x32
 80007a2:	f7ff fe55 	bl	8000450 <delay>
 80007a6:	e009      	b.n	80007bc <check_key+0xc0>
		} else if (*GPIOIntput & (1 << 5)) {
 80007a8:	4b74      	ldr	r3, [pc, #464]	; (800097c <check_key+0x280>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <check_key+0xc0>
			buttonState[0][1] = 0;
 80007b6:	4b72      	ldr	r3, [pc, #456]	; (8000980 <check_key+0x284>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	705a      	strb	r2, [r3, #1]
		}

		if (!(*GPIOIntput & (1 << 6)) && !buttonState[0][2]) {
 80007bc:	4b6f      	ldr	r3, [pc, #444]	; (800097c <check_key+0x280>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10f      	bne.n	80007ea <check_key+0xee>
 80007ca:	4b6d      	ldr	r3, [pc, #436]	; (8000980 <check_key+0x284>)
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <check_key+0xee>
			button_pressed = true;
 80007d4:	2301      	movs	r3, #1
 80007d6:	71bb      	strb	r3, [r7, #6]
			ch = '3';
 80007d8:	2333      	movs	r3, #51	; 0x33
 80007da:	71fb      	strb	r3, [r7, #7]
			buttonState[0][2] = 1;
 80007dc:	4b68      	ldr	r3, [pc, #416]	; (8000980 <check_key+0x284>)
 80007de:	2201      	movs	r2, #1
 80007e0:	709a      	strb	r2, [r3, #2]
			delay(50); // Debounce delay
 80007e2:	2032      	movs	r0, #50	; 0x32
 80007e4:	f7ff fe34 	bl	8000450 <delay>
 80007e8:	e009      	b.n	80007fe <check_key+0x102>
		} else if (*GPIOIntput & (1 << 6)) {
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <check_key+0x280>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <check_key+0x102>
			buttonState[0][2] = 0;
 80007f8:	4b61      	ldr	r3, [pc, #388]	; (8000980 <check_key+0x284>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	709a      	strb	r2, [r3, #2]
		}

		//*****************************************ROW 2*********************************************************

		*GPIOOutput |= (0x0F << 0);
 80007fe:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <check_key+0x27c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <check_key+0x27c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f042 020f 	orr.w	r2, r2, #15
 800080c:	601a      	str	r2, [r3, #0]

		*GPIOOutput &= ~(1 << 1);
 800080e:	4b5a      	ldr	r3, [pc, #360]	; (8000978 <check_key+0x27c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b58      	ldr	r3, [pc, #352]	; (8000978 <check_key+0x27c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f022 0202 	bic.w	r2, r2, #2
 800081c:	601a      	str	r2, [r3, #0]

		if (!(*GPIOIntput & (1 << 4)) && !buttonState[1][0]) {
 800081e:	4b57      	ldr	r3, [pc, #348]	; (800097c <check_key+0x280>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10f      	bne.n	800084c <check_key+0x150>
 800082c:	4b54      	ldr	r3, [pc, #336]	; (8000980 <check_key+0x284>)
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10a      	bne.n	800084c <check_key+0x150>
			button_pressed = true;
 8000836:	2301      	movs	r3, #1
 8000838:	71bb      	strb	r3, [r7, #6]
			ch = '4';
 800083a:	2334      	movs	r3, #52	; 0x34
 800083c:	71fb      	strb	r3, [r7, #7]
			buttonState[1][0] = 1;
 800083e:	4b50      	ldr	r3, [pc, #320]	; (8000980 <check_key+0x284>)
 8000840:	2201      	movs	r2, #1
 8000842:	70da      	strb	r2, [r3, #3]
			delay(50); // Debounce delay
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f7ff fe03 	bl	8000450 <delay>
 800084a:	e009      	b.n	8000860 <check_key+0x164>

		} else if (*GPIOIntput & (1 << 4)) {
 800084c:	4b4b      	ldr	r3, [pc, #300]	; (800097c <check_key+0x280>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <check_key+0x164>
			buttonState[1][0] = 0;
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <check_key+0x284>)
 800085c:	2200      	movs	r2, #0
 800085e:	70da      	strb	r2, [r3, #3]
		}

		if (!(*GPIOIntput & (1 << 5)) && !buttonState[1][1]) {
 8000860:	4b46      	ldr	r3, [pc, #280]	; (800097c <check_key+0x280>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10f      	bne.n	800088e <check_key+0x192>
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <check_key+0x284>)
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <check_key+0x192>
			button_pressed = true;
 8000878:	2301      	movs	r3, #1
 800087a:	71bb      	strb	r3, [r7, #6]
			ch = '5';
 800087c:	2335      	movs	r3, #53	; 0x35
 800087e:	71fb      	strb	r3, [r7, #7]
			buttonState[1][1] = 1;
 8000880:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <check_key+0x284>)
 8000882:	2201      	movs	r2, #1
 8000884:	711a      	strb	r2, [r3, #4]
			delay(50); // Debounce delay
 8000886:	2032      	movs	r0, #50	; 0x32
 8000888:	f7ff fde2 	bl	8000450 <delay>
 800088c:	e009      	b.n	80008a2 <check_key+0x1a6>
		} else if (*GPIOIntput & (1 << 5)) {
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <check_key+0x280>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <check_key+0x1a6>
			buttonState[1][1] = 0;
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <check_key+0x284>)
 800089e:	2200      	movs	r2, #0
 80008a0:	711a      	strb	r2, [r3, #4]
		}

		if (!(*GPIOIntput & (1 << 6)) && !buttonState[1][2]) {
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <check_key+0x280>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10f      	bne.n	80008d0 <check_key+0x1d4>
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <check_key+0x284>)
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10a      	bne.n	80008d0 <check_key+0x1d4>
			button_pressed = true;
 80008ba:	2301      	movs	r3, #1
 80008bc:	71bb      	strb	r3, [r7, #6]
			ch = '6';
 80008be:	2336      	movs	r3, #54	; 0x36
 80008c0:	71fb      	strb	r3, [r7, #7]
			buttonState[1][2] = 1;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <check_key+0x284>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	715a      	strb	r2, [r3, #5]
			delay(50); // Debounce delay
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f7ff fdc1 	bl	8000450 <delay>
 80008ce:	e009      	b.n	80008e4 <check_key+0x1e8>
		} else if (*GPIOIntput & (1 << 6)) {
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <check_key+0x280>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <check_key+0x1e8>
			buttonState[1][2] = 0;
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <check_key+0x284>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	715a      	strb	r2, [r3, #5]
		}

		//*****************************************ROW 3*********************************************************
		*GPIOOutput |= (0x0F << 0);
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <check_key+0x27c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <check_key+0x27c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 020f 	orr.w	r2, r2, #15
 80008f2:	601a      	str	r2, [r3, #0]

		*GPIOOutput &= ~(1 << 2);
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <check_key+0x27c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <check_key+0x27c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0204 	bic.w	r2, r2, #4
 8000902:	601a      	str	r2, [r3, #0]

		if (!(*GPIOIntput & (1 << 4)) && !buttonState[2][0]) {
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <check_key+0x280>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10f      	bne.n	8000932 <check_key+0x236>
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <check_key+0x284>)
 8000914:	799b      	ldrb	r3, [r3, #6]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10a      	bne.n	8000932 <check_key+0x236>
			button_pressed = true;
 800091c:	2301      	movs	r3, #1
 800091e:	71bb      	strb	r3, [r7, #6]
			ch = '7';
 8000920:	2337      	movs	r3, #55	; 0x37
 8000922:	71fb      	strb	r3, [r7, #7]
			buttonState[2][0] = 1;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <check_key+0x284>)
 8000926:	2201      	movs	r2, #1
 8000928:	719a      	strb	r2, [r3, #6]
			delay(50); // Debounce delay
 800092a:	2032      	movs	r0, #50	; 0x32
 800092c:	f7ff fd90 	bl	8000450 <delay>
 8000930:	e009      	b.n	8000946 <check_key+0x24a>

		} else if (*GPIOIntput & (1 << 4)) {
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <check_key+0x280>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <check_key+0x24a>
			buttonState[2][0] = 0;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <check_key+0x284>)
 8000942:	2200      	movs	r2, #0
 8000944:	719a      	strb	r2, [r3, #6]
		}

		if (!(*GPIOIntput & (1 << 5)) && !buttonState[2][1]) {
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <check_key+0x280>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d117      	bne.n	8000984 <check_key+0x288>
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <check_key+0x284>)
 8000956:	79db      	ldrb	r3, [r3, #7]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d112      	bne.n	8000984 <check_key+0x288>
			button_pressed = true;
 800095e:	2301      	movs	r3, #1
 8000960:	71bb      	strb	r3, [r7, #6]
			ch = '8';
 8000962:	2338      	movs	r3, #56	; 0x38
 8000964:	71fb      	strb	r3, [r7, #7]
			buttonState[2][1] = 1;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <check_key+0x284>)
 8000968:	2201      	movs	r2, #1
 800096a:	71da      	strb	r2, [r3, #7]
			delay(50); // Debounce delay
 800096c:	2032      	movs	r0, #50	; 0x32
 800096e:	f7ff fd6f 	bl	8000450 <delay>
 8000972:	e011      	b.n	8000998 <check_key+0x29c>
 8000974:	200000d4 	.word	0x200000d4
 8000978:	20000010 	.word	0x20000010
 800097c:	20000014 	.word	0x20000014
 8000980:	200000c8 	.word	0x200000c8
		} else if (*GPIOIntput & (1 << 5)) {
 8000984:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <check_key+0x420>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0320 	and.w	r3, r3, #32
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <check_key+0x29c>
			buttonState[2][1] = 0;
 8000992:	4b63      	ldr	r3, [pc, #396]	; (8000b20 <check_key+0x424>)
 8000994:	2200      	movs	r2, #0
 8000996:	71da      	strb	r2, [r3, #7]
		}

		if (!(*GPIOIntput & (1 << 6)) && !buttonState[2][2]) {
 8000998:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <check_key+0x420>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <check_key+0x2ca>
 80009a6:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <check_key+0x424>)
 80009a8:	7a1b      	ldrb	r3, [r3, #8]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10a      	bne.n	80009c6 <check_key+0x2ca>
			button_pressed = true;
 80009b0:	2301      	movs	r3, #1
 80009b2:	71bb      	strb	r3, [r7, #6]
			ch = '9';
 80009b4:	2339      	movs	r3, #57	; 0x39
 80009b6:	71fb      	strb	r3, [r7, #7]
			buttonState[2][2] = 1;
 80009b8:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <check_key+0x424>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	721a      	strb	r2, [r3, #8]
			delay(50); // Debounce delay
 80009be:	2032      	movs	r0, #50	; 0x32
 80009c0:	f7ff fd46 	bl	8000450 <delay>
 80009c4:	e009      	b.n	80009da <check_key+0x2de>
		} else if (*GPIOIntput & (1 << 6)) {
 80009c6:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <check_key+0x420>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <check_key+0x2de>
			buttonState[2][2] = 0;
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <check_key+0x424>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	721a      	strb	r2, [r3, #8]
		}

		//*****************************************ROW 4*********************************************************

		*GPIOOutput |= (0x0F << 0);
 80009da:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <check_key+0x428>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b50      	ldr	r3, [pc, #320]	; (8000b24 <check_key+0x428>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 020f 	orr.w	r2, r2, #15
 80009e8:	601a      	str	r2, [r3, #0]

		*GPIOOutput &= ~(1 << 3);
 80009ea:	4b4e      	ldr	r3, [pc, #312]	; (8000b24 <check_key+0x428>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b4c      	ldr	r3, [pc, #304]	; (8000b24 <check_key+0x428>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0208 	bic.w	r2, r2, #8
 80009f8:	601a      	str	r2, [r3, #0]

		if (!(*GPIOIntput & (1 << 4)) && !buttonState[3][0]) {
 80009fa:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <check_key+0x420>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10f      	bne.n	8000a28 <check_key+0x32c>
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <check_key+0x424>)
 8000a0a:	7a5b      	ldrb	r3, [r3, #9]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10a      	bne.n	8000a28 <check_key+0x32c>
			//USART2_StringTransmit("* \r\n");
			button_pressed = true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	71bb      	strb	r3, [r7, #6]
			ch = '*';
 8000a16:	232a      	movs	r3, #42	; 0x2a
 8000a18:	71fb      	strb	r3, [r7, #7]
			buttonState[3][0] = 1;
 8000a1a:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <check_key+0x424>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	725a      	strb	r2, [r3, #9]
			delay(50); // Debounce delay
 8000a20:	2032      	movs	r0, #50	; 0x32
 8000a22:	f7ff fd15 	bl	8000450 <delay>
 8000a26:	e009      	b.n	8000a3c <check_key+0x340>

		} else if (*GPIOIntput & (1 << 4)) {
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <check_key+0x420>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <check_key+0x340>
			buttonState[3][0] = 0;
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <check_key+0x424>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	725a      	strb	r2, [r3, #9]
		}

		if (!(*GPIOIntput & (1 << 5)) && !buttonState[3][1]) {
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <check_key+0x420>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <check_key+0x36e>
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <check_key+0x424>)
 8000a4c:	7a9b      	ldrb	r3, [r3, #10]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10a      	bne.n	8000a6a <check_key+0x36e>
			//USART2_StringTransmit("0 \r\n");
			button_pressed = true;
 8000a54:	2301      	movs	r3, #1
 8000a56:	71bb      	strb	r3, [r7, #6]
			ch = '0';
 8000a58:	2330      	movs	r3, #48	; 0x30
 8000a5a:	71fb      	strb	r3, [r7, #7]
			buttonState[3][1] = 1;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <check_key+0x424>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	729a      	strb	r2, [r3, #10]
			delay(50); // Debounce delay
 8000a62:	2032      	movs	r0, #50	; 0x32
 8000a64:	f7ff fcf4 	bl	8000450 <delay>
 8000a68:	e009      	b.n	8000a7e <check_key+0x382>
		} else if (*GPIOIntput & (1 << 5)) {
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <check_key+0x420>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <check_key+0x382>
			buttonState[3][1] = 0;
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <check_key+0x424>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	729a      	strb	r2, [r3, #10]
		}

		if (!(*GPIOIntput & (1 << 6)) && !buttonState[3][2]) {
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <check_key+0x420>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10f      	bne.n	8000aac <check_key+0x3b0>
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <check_key+0x424>)
 8000a8e:	7adb      	ldrb	r3, [r3, #11]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10a      	bne.n	8000aac <check_key+0x3b0>
			//USART2_StringTransmit("# \r\n");
			button_pressed = true;
 8000a96:	2301      	movs	r3, #1
 8000a98:	71bb      	strb	r3, [r7, #6]
			ch = '#';
 8000a9a:	2323      	movs	r3, #35	; 0x23
 8000a9c:	71fb      	strb	r3, [r7, #7]
			buttonState[3][2] = 1;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <check_key+0x424>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	72da      	strb	r2, [r3, #11]
			delay(50); // Debounce delay
 8000aa4:	2032      	movs	r0, #50	; 0x32
 8000aa6:	f7ff fcd3 	bl	8000450 <delay>
 8000aaa:	e009      	b.n	8000ac0 <check_key+0x3c4>
		} else if (*GPIOIntput & (1 << 6)) {
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <check_key+0x420>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <check_key+0x3c4>
			buttonState[3][2] = 0;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <check_key+0x424>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	72da      	strb	r2, [r3, #11]
		}
		if (ch == '#')
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b23      	cmp	r3, #35	; 0x23
 8000ac4:	d023      	beq.n	8000b0e <check_key+0x412>
			break;
		if ((button_pressed == true) && (!((!(ch == '*')) || (ch == '#')))) {
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <check_key+0x3e4>
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b2a      	cmp	r3, #42	; 0x2a
 8000ad0:	d106      	bne.n	8000ae0 <check_key+0x3e4>
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b23      	cmp	r3, #35	; 0x23
 8000ad6:	d003      	beq.n	8000ae0 <check_key+0x3e4>
#ifdef DEBUG
			USART2_string_transmit(
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <check_key+0x42c>)
 8000ada:	f7ff fc35 	bl	8000348 <USART2_string_transmit>
 8000ade:	e015      	b.n	8000b0c <check_key+0x410>
					"Invalid input. Please enter digits only.\r\n");
#endif
		} else if ((button_pressed == true) && ((ch >= '0') && (ch <= '9'))) {
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f43f ae18 	beq.w	8000718 <check_key+0x1c>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b2f      	cmp	r3, #47	; 0x2f
 8000aec:	f67f ae14 	bls.w	8000718 <check_key+0x1c>
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b39      	cmp	r3, #57	; 0x39
 8000af4:	f63f ae10 	bhi.w	8000718 <check_key+0x1c>
			key_data[i] = ch;
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <check_key+0x430>)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	701a      	strb	r2, [r3, #0]
			i++;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
			ch = '\0';
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]
		*GPIOOutput |= (0xFF << 0);
 8000b0c:	e604      	b.n	8000718 <check_key+0x1c>
			break;
 8000b0e:	bf00      	nop
		}
	}
	return key_data;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <check_key+0x430>)

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000014 	.word	0x20000014
 8000b20:	200000c8 	.word	0x200000c8
 8000b24:	20000010 	.word	0x20000010
 8000b28:	080031a8 	.word	0x080031a8
 8000b2c:	200000d4 	.word	0x200000d4

08000b30 <main>:
#include "keypad.h"
#include "security_system_interface.h"

#define SIXTEEN_MHZ	16000000

int main(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	systick_init_ms(SIXTEEN_MHZ);
 8000b34:	4815      	ldr	r0, [pc, #84]	; (8000b8c <main+0x5c>)
 8000b36:	f7ff fc47 	bl	80003c8 <systick_init_ms>
	beeper_init();
 8000b3a:	f7ff fc1b 	bl	8000374 <beeper_init>
	RC522_init();
 8000b3e:	f000 fa7b 	bl	8001038 <RC522_init>
	SSD1106_init();
 8000b42:	f000 f82b 	bl	8000b9c <SSD1106_init>
	SSD1106_gotoXY(0, 0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f977 	bl	8000e3c <SSD1106_gotoXY>
	init_keypad();
 8000b4e:	f7ff fd95 	bl	800067c <init_keypad>
#ifdef DEBUG
	USART2_init();
 8000b52:	f7ff fbad 	bl	80002b0 <USART2_init>
	USART2_string_transmit("Please tap card \r\n");
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <main+0x60>)
 8000b58:	f7ff fbf6 	bl	8000348 <USART2_string_transmit>
#endif
	SSD1106_clear_screen();
 8000b5c:	f000 fa29 	bl	8000fb2 <SSD1106_clear_screen>
	SSD1106_puts("Please tap card", &Font_7x10, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <main+0x64>)
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <main+0x68>)
 8000b66:	f000 f9ff 	bl	8000f68 <SSD1106_puts>
	SSD1106_gotoXY(0, 10);
 8000b6a:	210a      	movs	r1, #10
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f965 	bl	8000e3c <SSD1106_gotoXY>
	SSD1106_clear_line();
 8000b72:	f000 fa27 	bl	8000fc4 <SSD1106_clear_line>
	SSD1106_gotoXY(0, 20);
 8000b76:	2114      	movs	r1, #20
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f95f 	bl	8000e3c <SSD1106_gotoXY>
	SSD1106_clear_line();
 8000b7e:	f000 fa21 	bl	8000fc4 <SSD1106_clear_line>
	SSD1106_update_screen(); //display
 8000b82:	f000 f8c3 	bl	8000d0c <SSD1106_update_screen>

	while (1) {
		check_access();
 8000b86:	f000 fd27 	bl	80015d8 <check_access>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x56>
 8000b8c:	00f42400 	.word	0x00f42400
 8000b90:	080031d4 	.word	0x080031d4
 8000b94:	20000000 	.word	0x20000000
 8000b98:	080031e8 	.word	0x080031e8

08000b9c <SSD1106_init>:
/* Private variable */
static SSD1106_t SSD1106;

#define SSD1106_DEACTIVATE_SCROLL                    0x2E // Stop scroll

uint8_t SSD1106_init(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

	/* Init I2C */
	i2c_init();
 8000ba2:	f7ff fc69 	bl	8000478 <i2c_init>
	SSD1106_i2c_init();
 8000ba6:	f000 fa1b 	bl	8000fe0 <SSD1106_i2c_init>

	/* A little delay */
	uint32_t p = 2500;
 8000baa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bae:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000bb0:	e002      	b.n	8000bb8 <SSD1106_init+0x1c>
		p--;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f9      	bne.n	8000bb2 <SSD1106_init+0x16>

	/* Init LCD */
	SSD1106_WRITECOMMAND(0xAE); //display off
 8000bbe:	22ae      	movs	r2, #174	; 0xae
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	203c      	movs	r0, #60	; 0x3c
 8000bc4:	f7ff fca4 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000bc8:	2220      	movs	r2, #32
 8000bca:	2100      	movs	r1, #0
 8000bcc:	203c      	movs	r0, #60	; 0x3c
 8000bce:	f7ff fc9f 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bd2:	2210      	movs	r2, #16
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	203c      	movs	r0, #60	; 0x3c
 8000bd8:	f7ff fc9a 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bdc:	22b0      	movs	r2, #176	; 0xb0
 8000bde:	2100      	movs	r1, #0
 8000be0:	203c      	movs	r0, #60	; 0x3c
 8000be2:	f7ff fc95 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000be6:	22c8      	movs	r2, #200	; 0xc8
 8000be8:	2100      	movs	r1, #0
 8000bea:	203c      	movs	r0, #60	; 0x3c
 8000bec:	f7ff fc90 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x00); //---set low column address
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	203c      	movs	r0, #60	; 0x3c
 8000bf6:	f7ff fc8b 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x10); //---set high column address
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	203c      	movs	r0, #60	; 0x3c
 8000c00:	f7ff fc86 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x40); //--set start line address
 8000c04:	2240      	movs	r2, #64	; 0x40
 8000c06:	2100      	movs	r1, #0
 8000c08:	203c      	movs	r0, #60	; 0x3c
 8000c0a:	f7ff fc81 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x81); //--set contrast control register
 8000c0e:	2281      	movs	r2, #129	; 0x81
 8000c10:	2100      	movs	r1, #0
 8000c12:	203c      	movs	r0, #60	; 0x3c
 8000c14:	f7ff fc7c 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xFF);
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	203c      	movs	r0, #60	; 0x3c
 8000c1e:	f7ff fc77 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c22:	22a1      	movs	r2, #161	; 0xa1
 8000c24:	2100      	movs	r1, #0
 8000c26:	203c      	movs	r0, #60	; 0x3c
 8000c28:	f7ff fc72 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xA6); //--set normal display
 8000c2c:	22a6      	movs	r2, #166	; 0xa6
 8000c2e:	2100      	movs	r1, #0
 8000c30:	203c      	movs	r0, #60	; 0x3c
 8000c32:	f7ff fc6d 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c36:	22a8      	movs	r2, #168	; 0xa8
 8000c38:	2100      	movs	r1, #0
 8000c3a:	203c      	movs	r0, #60	; 0x3c
 8000c3c:	f7ff fc68 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x3F); //
 8000c40:	223f      	movs	r2, #63	; 0x3f
 8000c42:	2100      	movs	r1, #0
 8000c44:	203c      	movs	r0, #60	; 0x3c
 8000c46:	f7ff fc63 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c4a:	22a4      	movs	r2, #164	; 0xa4
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	203c      	movs	r0, #60	; 0x3c
 8000c50:	f7ff fc5e 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xD3); //-set display offset
 8000c54:	22d3      	movs	r2, #211	; 0xd3
 8000c56:	2100      	movs	r1, #0
 8000c58:	203c      	movs	r0, #60	; 0x3c
 8000c5a:	f7ff fc59 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x00); //-not offset
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	203c      	movs	r0, #60	; 0x3c
 8000c64:	f7ff fc54 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c68:	22d5      	movs	r2, #213	; 0xd5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	203c      	movs	r0, #60	; 0x3c
 8000c6e:	f7ff fc4f 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xF0); //--set divide ratio
 8000c72:	22f0      	movs	r2, #240	; 0xf0
 8000c74:	2100      	movs	r1, #0
 8000c76:	203c      	movs	r0, #60	; 0x3c
 8000c78:	f7ff fc4a 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c7c:	22d9      	movs	r2, #217	; 0xd9
 8000c7e:	2100      	movs	r1, #0
 8000c80:	203c      	movs	r0, #60	; 0x3c
 8000c82:	f7ff fc45 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x22); //
 8000c86:	2222      	movs	r2, #34	; 0x22
 8000c88:	2100      	movs	r1, #0
 8000c8a:	203c      	movs	r0, #60	; 0x3c
 8000c8c:	f7ff fc40 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c90:	22da      	movs	r2, #218	; 0xda
 8000c92:	2100      	movs	r1, #0
 8000c94:	203c      	movs	r0, #60	; 0x3c
 8000c96:	f7ff fc3b 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x12);
 8000c9a:	2212      	movs	r2, #18
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	203c      	movs	r0, #60	; 0x3c
 8000ca0:	f7ff fc36 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xDB); //--set vcomh
 8000ca4:	22db      	movs	r2, #219	; 0xdb
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	203c      	movs	r0, #60	; 0x3c
 8000caa:	f7ff fc31 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	203c      	movs	r0, #60	; 0x3c
 8000cb4:	f7ff fc2c 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cb8:	228d      	movs	r2, #141	; 0x8d
 8000cba:	2100      	movs	r1, #0
 8000cbc:	203c      	movs	r0, #60	; 0x3c
 8000cbe:	f7ff fc27 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0x14); //
 8000cc2:	2214      	movs	r2, #20
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	203c      	movs	r0, #60	; 0x3c
 8000cc8:	f7ff fc22 	bl	8000510 <i2c_write_byte>
	SSD1106_WRITECOMMAND(0xAF); //--turn on SSD1106 panel
 8000ccc:	22af      	movs	r2, #175	; 0xaf
 8000cce:	2100      	movs	r1, #0
 8000cd0:	203c      	movs	r0, #60	; 0x3c
 8000cd2:	f7ff fc1d 	bl	8000510 <i2c_write_byte>

	SSD1106_WRITECOMMAND(SSD1106_DEACTIVATE_SCROLL);
 8000cd6:	222e      	movs	r2, #46	; 0x2e
 8000cd8:	2100      	movs	r1, #0
 8000cda:	203c      	movs	r0, #60	; 0x3c
 8000cdc:	f7ff fc18 	bl	8000510 <i2c_write_byte>

	/* Clear screen */
	SSD1106_fill(SSD1106_COLOR_BLACK);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f841 	bl	8000d68 <SSD1106_fill>

	/* Update screen */
	SSD1106_update_screen();
 8000ce6:	f000 f811 	bl	8000d0c <SSD1106_update_screen>

	/* Set default values */
	SSD1106.CurrentX = 0;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <SSD1106_init+0x16c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	801a      	strh	r2, [r3, #0]
	SSD1106.CurrentY = 0;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SSD1106_init+0x16c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1106.Initialized = 1;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SSD1106_init+0x16c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	711a      	strb	r2, [r3, #4]

	/* Return OK */
	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000508 	.word	0x20000508

08000d0c <SSD1106_update_screen>:

void SSD1106_update_screen(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e01d      	b.n	8000d54 <SSD1106_update_screen+0x48>
		SSD1106_WRITECOMMAND(0xB0 + m);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	3b50      	subs	r3, #80	; 0x50
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	203c      	movs	r0, #60	; 0x3c
 8000d24:	f7ff fbf4 	bl	8000510 <i2c_write_byte>
		SSD1106_WRITECOMMAND(0x00);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	203c      	movs	r0, #60	; 0x3c
 8000d2e:	f7ff fbef 	bl	8000510 <i2c_write_byte>
		SSD1106_WRITECOMMAND(0x10);
 8000d32:	2210      	movs	r2, #16
 8000d34:	2100      	movs	r1, #0
 8000d36:	203c      	movs	r0, #60	; 0x3c
 8000d38:	f7ff fbea 	bl	8000510 <i2c_write_byte>

		/* Write multi data */
		SSD1106_i2c_write_multi(SSD1106_I2C_ADDR, 0x40,
				&SSD1106_Buffer[SSD1106_WIDTH * m], SSD1106_WIDTH);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	01db      	lsls	r3, r3, #7
		SSD1106_i2c_write_multi(SSD1106_I2C_ADDR, 0x40,
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <SSD1106_update_screen+0x58>)
 8000d42:	441a      	add	r2, r3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	203c      	movs	r0, #60	; 0x3c
 8000d4a:	f000 f95f 	bl	800100c <SSD1106_i2c_write_multi>
	for (m = 0; m < 8; m++) {
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	3301      	adds	r3, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	d9de      	bls.n	8000d18 <SSD1106_update_screen+0xc>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000108 	.word	0x20000108

08000d68 <SSD1106_fill>:

void SSD1106_fill(SSD1106_COLOR_t color) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1106_Buffer, (color == SSD1106_COLOR_BLACK) ? 0x00 : 0xFF,
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <SSD1106_fill+0x14>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e000      	b.n	8000d7e <SSD1106_fill+0x16>
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	4619      	mov	r1, r3
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <SSD1106_fill+0x2c>)
 8000d86:	f001 fa9b 	bl	80022c0 <memset>
			sizeof(SSD1106_Buffer));
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000108 	.word	0x20000108

08000d98 <SSD1106_draw_pixel>:

void SSD1106_draw_pixel(uint16_t x, uint16_t y, SSD1106_COLOR_t color) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1106_WIDTH || y >= SSD1106_HEIGHT) {
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b7f      	cmp	r3, #127	; 0x7f
 8000dae:	d83d      	bhi.n	8000e2c <SSD1106_draw_pixel+0x94>
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	2b3f      	cmp	r3, #63	; 0x3f
 8000db4:	d83a      	bhi.n	8000e2c <SSD1106_draw_pixel+0x94>
		/* Error */
		return;
	}

	/* Set color */
	if (color == SSD1106_COLOR_WHITE) {
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d11a      	bne.n	8000df2 <SSD1106_draw_pixel+0x5a>
		SSD1106_Buffer[x + (y / 8) * SSD1106_WIDTH] |= 1 << (y % 8);
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <SSD1106_draw_pixel+0xa0>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b259      	sxtb	r1, r3
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	4603      	mov	r3, r0
 8000de6:	01db      	lsls	r3, r3, #7
 8000de8:	4413      	add	r3, r2
 8000dea:	b2c9      	uxtb	r1, r1
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <SSD1106_draw_pixel+0xa0>)
 8000dee:	54d1      	strb	r1, [r2, r3]
 8000df0:	e01d      	b.n	8000e2e <SSD1106_draw_pixel+0x96>
	} else {
		SSD1106_Buffer[x + (y / 8) * SSD1106_WIDTH] &= ~(1 << (y % 8));
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	b298      	uxth	r0, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <SSD1106_draw_pixel+0xa0>)
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	b25a      	sxtb	r2, r3
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	b259      	sxtb	r1, r3
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	4413      	add	r3, r2
 8000e24:	b2c9      	uxtb	r1, r1
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <SSD1106_draw_pixel+0xa0>)
 8000e28:	54d1      	strb	r1, [r2, r3]
 8000e2a:	e000      	b.n	8000e2e <SSD1106_draw_pixel+0x96>
		return;
 8000e2c:	bf00      	nop
	}
}
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	20000108 	.word	0x20000108

08000e3c <SSD1106_gotoXY>:

void SSD1106_gotoXY(uint16_t x, uint16_t y) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1106.CurrentX = x;
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SSD1106_gotoXY+0x28>)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	8013      	strh	r3, [r2, #0]
	SSD1106.CurrentY = y;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <SSD1106_gotoXY+0x28>)
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	8053      	strh	r3, [r2, #2]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000508 	.word	0x20000508

08000e68 <SSD1106_putc>:

char SSD1106_putc(char ch, FontDef_t *Font, SSD1106_COLOR_t color) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1106_WIDTH <= (SSD1106.CurrentX + Font->FontWidth) ||
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <SSD1106_putc+0xfc>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
	if (
 8000e84:	2b7f      	cmp	r3, #127	; 0x7f
 8000e86:	dc07      	bgt.n	8000e98 <SSD1106_putc+0x30>
	SSD1106_HEIGHT <= (SSD1106.CurrentY + Font->FontHeight)) {
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <SSD1106_putc+0xfc>)
 8000e8a:	885b      	ldrh	r3, [r3, #2]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	4413      	add	r3, r2
	SSD1106_WIDTH <= (SSD1106.CurrentX + Font->FontWidth) ||
 8000e94:	2b3f      	cmp	r3, #63	; 0x3f
 8000e96:	dd01      	ble.n	8000e9c <SSD1106_putc+0x34>
		/* Error */
		return 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e05e      	b.n	8000f5a <SSD1106_putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e04b      	b.n	8000f3a <SSD1106_putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	3b20      	subs	r3, #32
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	7849      	ldrb	r1, [r1, #1]
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	e030      	b.n	8000f28 <SSD1106_putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d010      	beq.n	8000ef8 <SSD1106_putc+0x90>
				SSD1106_draw_pixel(SSD1106.CurrentX + j, (SSD1106.CurrentY + i),
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <SSD1106_putc+0xfc>)
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	b298      	uxth	r0, r3
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <SSD1106_putc+0xfc>)
 8000ee4:	885a      	ldrh	r2, [r3, #2]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	79ba      	ldrb	r2, [r7, #6]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff ff51 	bl	8000d98 <SSD1106_draw_pixel>
 8000ef6:	e014      	b.n	8000f22 <SSD1106_putc+0xba>
						(SSD1106_COLOR_t) color);
			} else {
				SSD1106_draw_pixel(SSD1106.CurrentX + j, (SSD1106.CurrentY + i),
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <SSD1106_putc+0xfc>)
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	b298      	uxth	r0, r3
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <SSD1106_putc+0xfc>)
 8000f06:	885a      	ldrh	r2, [r3, #2]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf0c      	ite	eq
 8000f16:	2301      	moveq	r3, #1
 8000f18:	2300      	movne	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f7ff ff3b 	bl	8000d98 <SSD1106_draw_pixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3301      	adds	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d3c8      	bcc.n	8000ec6 <SSD1106_putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d3ad      	bcc.n	8000ea2 <SSD1106_putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1106.CurrentX += Font->FontWidth;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <SSD1106_putc+0xfc>)
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <SSD1106_putc+0xfc>)
 8000f56:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000508 	.word	0x20000508

08000f68 <SSD1106_puts>:

char SSD1106_puts(char *str, FontDef_t *Font, SSD1106_COLOR_t color) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f76:	e012      	b.n	8000f9e <SSD1106_puts+0x36>
		/* Write character by character */
		if (SSD1106_putc(*str, Font, color) != *str) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff71 	bl	8000e68 <SSD1106_putc>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d002      	beq.n	8000f98 <SSD1106_puts+0x30>
			/* Return error */
			return *str;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	e008      	b.n	8000faa <SSD1106_puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e8      	bne.n	8000f78 <SSD1106_puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <SSD1106_clear_screen>:

void SSD1106_clear_screen(void) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
	SSD1106_fill(0);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fed6 	bl	8000d68 <SSD1106_fill>
	SSD1106_update_screen();
 8000fbc:	f7ff fea6 	bl	8000d0c <SSD1106_update_screen>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SSD1106_clear_line>:

void SSD1106_clear_line(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	SSD1106_puts("                  ", &Font_7x10, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4903      	ldr	r1, [pc, #12]	; (8000fd8 <SSD1106_clear_line+0x14>)
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <SSD1106_clear_line+0x18>)
 8000fce:	f7ff ffcb 	bl	8000f68 <SSD1106_puts>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	080031f8 	.word	0x080031f8

08000fe0 <SSD1106_i2c_init>:

void SSD1106_i2c_init() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

	uint32_t p = 250000;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <SSD1106_i2c_init+0x28>)
 8000fe8:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000fea:	e002      	b.n	8000ff2 <SSD1106_i2c_init+0x12>
		p--;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f9      	bne.n	8000fec <SSD1106_i2c_init+0xc>

}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	0003d090 	.word	0x0003d090

0800100c <SSD1106_i2c_write_multi>:

void SSD1106_i2c_write_multi(uint8_t address, uint8_t reg, char *data,
		uint16_t count) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	603a      	str	r2, [r7, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	460b      	mov	r3, r1
 800101c:	71bb      	strb	r3, [r7, #6]
 800101e:	4613      	mov	r3, r2
 8001020:	80bb      	strh	r3, [r7, #4]
	i2c_write_multi(address, reg, data, count);
 8001022:	88bb      	ldrh	r3, [r7, #4]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	79b9      	ldrb	r1, [r7, #6]
 8001028:	79f8      	ldrb	r0, [r7, #7]
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	f7ff fac4 	bl	80005b8 <i2c_write_multi>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <RC522_init>:
 * STM32 ->RFID
 * SPI  -> SPI
 * PA8  ->RST
 * PB0  ->CS
 * */
void RC522_init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	spi_init();
 800103c:	f000 fd34 	bl	8001aa8 <spi_init>
	GPIOA->MODER |= GPIO_MODER_MODE8_0;
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <RC522_init+0x90>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <RC522_init+0x90>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE8_1;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <RC522_init+0x90>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <RC522_init+0x90>)
 8001052:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001056:	6013      	str	r3, [r2, #0]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <RC522_init+0x94>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <RC522_init+0x94>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= GPIO_MODER_MODE0_0;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <RC522_init+0x98>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <RC522_init+0x98>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

	GPIOA->BSRR = GPIO_BSRR_BR8;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <RC522_init+0x90>)
 8001072:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001076:	619a      	str	r2, [r3, #24]
	delay(50);
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f7ff f9e9 	bl	8000450 <delay>
	GPIOA->BSRR = GPIO_BSRR_BS8;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <RC522_init+0x90>)
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	619a      	str	r2, [r3, #24]
	delay(50);
 8001086:	2032      	movs	r0, #50	; 0x32
 8001088:	f7ff f9e2 	bl	8000450 <delay>
	RC522_reset();
 800108c:	f000 f8c1 	bl	8001212 <RC522_reset>

	RC522_reg_write8(MFRC522_REG_T_MODE, 0x80); // Timer starts automatically at the end of the transmission
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	202a      	movs	r0, #42	; 0x2a
 8001094:	f000 f864 	bl	8001160 <RC522_reg_write8>
	RC522_reg_write8(MFRC522_REG_T_PRESCALER, 0xA9); // The lower TPrescaler value
 8001098:	21a9      	movs	r1, #169	; 0xa9
 800109a:	202b      	movs	r0, #43	; 0x2b
 800109c:	f000 f860 	bl	8001160 <RC522_reg_write8>
	RC522_reg_write8(MFRC522_REG_T_RELOAD_L, 0xE8); // Lower 8 bits of the 16-bit timer reload value
 80010a0:	21e8      	movs	r1, #232	; 0xe8
 80010a2:	202d      	movs	r0, #45	; 0x2d
 80010a4:	f000 f85c 	bl	8001160 <RC522_reg_write8>
	RC522_reg_write8(MFRC522_REG_T_RELOAD_H, 0x03); // Higher 8 bits of the 16-bit timer reload value
 80010a8:	2103      	movs	r1, #3
 80010aa:	202c      	movs	r0, #44	; 0x2c
 80010ac:	f000 f858 	bl	8001160 <RC522_reg_write8>

	RC522_reg_write8(MFRC522_REG_TX_AUTO, 0x40);
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	2015      	movs	r0, #21
 80010b4:	f000 f854 	bl	8001160 <RC522_reg_write8>
	RC522_reg_write8(MFRC522_REG_MODE, 0x3D);
 80010b8:	213d      	movs	r1, #61	; 0x3d
 80010ba:	2011      	movs	r0, #17
 80010bc:	f000 f850 	bl	8001160 <RC522_reg_write8>

	RC522_antenna_ON();   //Open the antenna
 80010c0:	f000 f8af 	bl	8001222 <RC522_antenna_ON>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400

080010d4 <RC522_spi_cs_write>:

void RC522_spi_cs_write(bool state) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <RC522_spi_cs_write+0x1e>
		GPIOB->ODR |= (1UL << 0);
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <RC522_spi_cs_write+0x38>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <RC522_spi_cs_write+0x38>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6153      	str	r3, [r2, #20]
	} else {
		GPIOB->ODR &= ~(1UL << 0);
	}
}
 80010f0:	e005      	b.n	80010fe <RC522_spi_cs_write+0x2a>
		GPIOB->ODR &= ~(1UL << 0);
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <RC522_spi_cs_write+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <RC522_spi_cs_write+0x38>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6153      	str	r3, [r2, #20]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400

08001110 <RC522_reg_read8>:

uint8_t RC522_reg_read8(uint8_t reg) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	RC522_spi_cs_write(0);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ffda 	bl	80010d4 <RC522_spi_cs_write>
	reg = ((reg << 1) & 0x7E) | 0x80;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800112a:	b25b      	sxtb	r3, r3
 800112c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001130:	b25b      	sxtb	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	71fb      	strb	r3, [r7, #7]
	spi_transmit(&reg, 1);
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fcee 	bl	8001b1c <spi_transmit>
	uint8_t dataRd = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
	spi_receive(&dataRd, 1);
 8001144:	f107 030f 	add.w	r3, r7, #15
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fd68 	bl	8001c20 <spi_receive>
	RC522_spi_cs_write(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ffbf 	bl	80010d4 <RC522_spi_cs_write>
	return dataRd;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <RC522_reg_write8>:

void RC522_reg_write8(uint8_t reg, uint8_t data8) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	RC522_spi_cs_write(0);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ffaf 	bl	80010d4 <RC522_spi_cs_write>
	uint8_t txData[2] = { 0x7E & (reg << 1), data8 };
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001180:	b2db      	uxtb	r3, r3
 8001182:	733b      	strb	r3, [r7, #12]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	737b      	strb	r3, [r7, #13]
	spi_transmit(txData, 2);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fcc4 	bl	8001b1c <spi_transmit>
	RC522_spi_cs_write(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff ff9d 	bl	80010d4 <RC522_spi_cs_write>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <RC522_set_bit>:

void RC522_set_bit(uint8_t reg, uint8_t mask) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	460a      	mov	r2, r1
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	4613      	mov	r3, r2
 80011b0:	71bb      	strb	r3, [r7, #6]
	RC522_reg_write8(reg, RC522_reg_read8(reg) | mask);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffab 	bl	8001110 <RC522_reg_read8>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffc9 	bl	8001160 <RC522_reg_write8>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <RC522_clear_bit>:

void RC522_clear_bit(uint8_t reg, uint8_t mask) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	460a      	mov	r2, r1
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	4613      	mov	r3, r2
 80011e4:	71bb      	strb	r3, [r7, #6]
	RC522_reg_write8(reg, RC522_reg_read8(reg) & (~mask));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff91 	bl	8001110 <RC522_reg_read8>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4013      	ands	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffab 	bl	8001160 <RC522_reg_write8>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <RC522_reset>:

void RC522_reset(void) {
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
	RC522_reg_write8(0x01, 0x0F);
 8001216:	210f      	movs	r1, #15
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ffa1 	bl	8001160 <RC522_reg_write8>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <RC522_antenna_ON>:

void RC522_antenna_ON(void) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = RC522_reg_read8(MFRC522_REG_TX_CONTROL); // Output signal on pin TX2
 8001228:	2014      	movs	r0, #20
 800122a:	f7ff ff71 	bl	8001110 <RC522_reg_read8>
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <RC522_antenna_ON+0x22>
		RC522_set_bit(MFRC522_REG_TX_CONTROL, 0x03);
 800123c:	2103      	movs	r1, #3
 800123e:	2014      	movs	r0, #20
 8001240:	f7ff ffaf 	bl	80011a2 <RC522_set_bit>
	}
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <RC522_check_card>:

bool RC522_check_card(uint8_t *id) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	bool status = false;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	//Find cards, return card type
	status = RC522_request(PICC_REQIDL, id);
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	2026      	movs	r0, #38	; 0x26
 800125c:	f000 f811 	bl	8001282 <RC522_request>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]
	if (status == true) {
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <RC522_check_card+0x28>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = RC522_anti_coll(id);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f912 	bl	8001494 <RC522_anti_coll>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
	}
	RC522_halt();      //Command card into hibernation
 8001274:	f000 f94b 	bl	800150e <RC522_halt>

	return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <RC522_request>:

bool RC522_request(uint8_t reqMode, uint8_t *tagType) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af02      	add	r7, sp, #8
 8001288:	4603      	mov	r3, r0
 800128a:	6039      	str	r1, [r7, #0]
 800128c:	71fb      	strb	r3, [r7, #7]
	bool status = false;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint16_t backBits;
	RC522_reg_write8(MFRC522_REG_BIT_FRAMING, 0x07);
 8001292:	2107      	movs	r1, #7
 8001294:	200d      	movs	r0, #13
 8001296:	f7ff ff63 	bl	8001160 <RC522_reg_write8>
	tagType[0] = reqMode;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	701a      	strb	r2, [r3, #0]
	status = RC522_to_card(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	200c      	movs	r0, #12
 80012ae:	f000 f813 	bl	80012d8 <RC522_to_card>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
	if ((status != true) || (backBits != 0x10)) {
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <RC522_request+0x46>
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d001      	beq.n	80012cc <RC522_request+0x4a>
		status = false;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <RC522_to_card>:

bool RC522_to_card(uint8_t command, uint8_t *sendData, uint8_t sendLen,
		uint8_t *backData, uint16_t *backLen) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	4613      	mov	r3, r2
 80012e8:	73bb      	strb	r3, [r7, #14]
	bool status = false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	76fb      	strb	r3, [r7, #27]
	uint8_t waitIRq = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	76bb      	strb	r3, [r7, #26]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	irqEn = 0x77;
 80012f6:	2377      	movs	r3, #119	; 0x77
 80012f8:	76fb      	strb	r3, [r7, #27]
	waitIRq = 0x30;
 80012fa:	2330      	movs	r3, #48	; 0x30
 80012fc:	76bb      	strb	r3, [r7, #26]

	RC522_reg_write8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80012fe:	7efb      	ldrb	r3, [r7, #27]
 8001300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff ff29 	bl	8001160 <RC522_reg_write8>
	RC522_clear_bit(MFRC522_REG_COMM_IRQ, 0x80);
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	2004      	movs	r0, #4
 8001312:	f7ff ff60 	bl	80011d6 <RC522_clear_bit>
	RC522_set_bit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	200a      	movs	r0, #10
 800131a:	f7ff ff42 	bl	80011a2 <RC522_set_bit>

	RC522_reg_write8(MFRC522_REG_COMMAND, PCD_IDLE);
 800131e:	2100      	movs	r1, #0
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff ff1d 	bl	8001160 <RC522_reg_write8>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	83bb      	strh	r3, [r7, #28]
 800132a:	e00a      	b.n	8001342 <RC522_to_card+0x6a>
		RC522_reg_write8(MFRC522_REG_FIFO_DATA, sendData[i]);
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	2009      	movs	r0, #9
 8001338:	f7ff ff12 	bl	8001160 <RC522_reg_write8>
	for (i = 0; i < sendLen; i++) {
 800133c:	8bbb      	ldrh	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	83bb      	strh	r3, [r7, #28]
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
 8001346:	8bba      	ldrh	r2, [r7, #28]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3ef      	bcc.n	800132c <RC522_to_card+0x54>
	}

	//Execute the command
	RC522_reg_write8(MFRC522_REG_COMMAND, command);
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	4619      	mov	r1, r3
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ff05 	bl	8001160 <RC522_reg_write8>
	if (command == PCD_TRANSCEIVE) {
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d103      	bne.n	8001364 <RC522_to_card+0x8c>
		RC522_set_bit(MFRC522_REG_BIT_FRAMING, 0x80); //StartSend=1,transmission of data starts
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	200d      	movs	r0, #13
 8001360:	f7ff ff1f 	bl	80011a2 <RC522_set_bit>
	}

	//Waiting to receive data to complete
	i = 100; //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	83bb      	strh	r3, [r7, #28]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = RC522_reg_read8(MFRC522_REG_COMM_IRQ);
 8001368:	2004      	movs	r0, #4
 800136a:	f7ff fed1 	bl	8001110 <RC522_reg_read8>
 800136e:	4603      	mov	r3, r0
 8001370:	77bb      	strb	r3, [r7, #30]
		i--;
 8001372:	8bbb      	ldrh	r3, [r7, #28]
 8001374:	3b01      	subs	r3, #1
 8001376:	83bb      	strh	r3, [r7, #28]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001378:	8bbb      	ldrh	r3, [r7, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <RC522_to_card+0xbc>
 800137e:	7fbb      	ldrb	r3, [r7, #30]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <RC522_to_card+0xbc>
 8001388:	7fba      	ldrb	r2, [r7, #30]
 800138a:	7ebb      	ldrb	r3, [r7, #26]
 800138c:	4013      	ands	r3, r2
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0e9      	beq.n	8001368 <RC522_to_card+0x90>

	RC522_clear_bit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	200d      	movs	r0, #13
 8001398:	f7ff ff1d 	bl	80011d6 <RC522_clear_bit>

	if (i != 0) {
 800139c:	8bbb      	ldrh	r3, [r7, #28]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06d      	beq.n	800147e <RC522_to_card+0x1a6>
		if (!(RC522_reg_read8(MFRC522_REG_ERROR) & 0x1B)) {
 80013a2:	2006      	movs	r0, #6
 80013a4:	f7ff feb4 	bl	8001110 <RC522_reg_read8>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f003 031b 	and.w	r3, r3, #27
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d160      	bne.n	8001474 <RC522_to_card+0x19c>
			status = true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 80013b6:	7fba      	ldrb	r2, [r7, #30]
 80013b8:	7efb      	ldrb	r3, [r7, #27]
 80013ba:	4013      	ands	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <RC522_to_card+0xf2>
				status = false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	d156      	bne.n	800147e <RC522_to_card+0x1a6>
				n = RC522_reg_read8(MFRC522_REG_FIFO_LEVEL);
 80013d0:	200a      	movs	r0, #10
 80013d2:	f7ff fe9d 	bl	8001110 <RC522_reg_read8>
 80013d6:	4603      	mov	r3, r0
 80013d8:	77bb      	strb	r3, [r7, #30]
				uint8_t l = n;
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	767b      	strb	r3, [r7, #25]
				lastBits = RC522_reg_read8(MFRC522_REG_CONTROL) & 0x07;
 80013de:	200c      	movs	r0, #12
 80013e0:	f7ff fe96 	bl	8001110 <RC522_reg_read8>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	763b      	strb	r3, [r7, #24]
				if (lastBits) {
 80013ec:	7e3b      	ldrb	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <RC522_to_card+0x132>
					*backLen = (n - 1) * 8 + lastBits;
 80013f2:	7fbb      	ldrb	r3, [r7, #30]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	7e3b      	ldrb	r3, [r7, #24]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29a      	uxth	r2, r3
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	e005      	b.n	8001416 <RC522_to_card+0x13e>
				} else {
					*backLen = n * 8;
 800140a:	7fbb      	ldrb	r3, [r7, #30]
 800140c:	b29b      	uxth	r3, r3
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	b29a      	uxth	r2, r3
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8001416:	7fbb      	ldrb	r3, [r7, #30]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <RC522_to_card+0x148>
					n = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	77bb      	strb	r3, [r7, #30]
				}
				if (n > MFRC522_MAX_LEN) {
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d901      	bls.n	800142a <RC522_to_card+0x152>
					n = MFRC522_MAX_LEN;
 8001426:	2310      	movs	r3, #16
 8001428:	77bb      	strb	r3, [r7, #30]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	83bb      	strh	r3, [r7, #28]
 800142e:	e014      	b.n	800145a <RC522_to_card+0x182>
					uint8_t d = RC522_reg_read8(MFRC522_REG_FIFO_DATA);
 8001430:	2009      	movs	r0, #9
 8001432:	f7ff fe6d 	bl	8001110 <RC522_reg_read8>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
					if (l == 4)
 800143a:	7e7b      	ldrb	r3, [r7, #25]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d104      	bne.n	800144a <RC522_to_card+0x172>
						printf("%02x ", d);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <RC522_to_card+0x1b0>)
 8001446:	f000 fdd5 	bl	8001ff4 <iprintf>
					backData[i] = d;
 800144a:	8bbb      	ldrh	r3, [r7, #28]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	7dfa      	ldrb	r2, [r7, #23]
 8001452:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < n; i++) {
 8001454:	8bbb      	ldrh	r3, [r7, #28]
 8001456:	3301      	adds	r3, #1
 8001458:	83bb      	strh	r3, [r7, #28]
 800145a:	7fbb      	ldrb	r3, [r7, #30]
 800145c:	b29b      	uxth	r3, r3
 800145e:	8bba      	ldrh	r2, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3e5      	bcc.n	8001430 <RC522_to_card+0x158>
				}
				if (l == 4)
 8001464:	7e7b      	ldrb	r3, [r7, #25]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d102      	bne.n	8001470 <RC522_to_card+0x198>
					printf("\r\n");
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <RC522_to_card+0x1b4>)
 800146c:	f000 fe28 	bl	80020c0 <puts>
				return status;
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	e005      	b.n	8001480 <RC522_to_card+0x1a8>
			}
		} else {
			printf("error\r\n");
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <RC522_to_card+0x1b8>)
 8001476:	f000 fe23 	bl	80020c0 <puts>
			status = false;
 800147a:	2300      	movs	r3, #0
 800147c:	77fb      	strb	r3, [r7, #31]
		}
	}

	return status;
 800147e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800320c 	.word	0x0800320c
 800148c:	08003214 	.word	0x08003214
 8001490:	08003218 	.word	0x08003218

08001494 <RC522_anti_coll>:

bool RC522_anti_coll(uint8_t *serNum) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
	bool status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	RC522_reg_write8(MFRC522_REG_BIT_FRAMING, 0x00); //TxLastBists = BitFramingReg[2..0]
 80014a0:	2100      	movs	r1, #0
 80014a2:	200d      	movs	r0, #13
 80014a4:	f7ff fe5c 	bl	8001160 <RC522_reg_write8>

	serNum[0] = PICC_ANTICOLL;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2293      	movs	r2, #147	; 0x93
 80014ac:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	2220      	movs	r2, #32
 80014b4:	701a      	strb	r2, [r3, #0]
	status = RC522_to_card(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80014b6:	f107 030a 	add.w	r3, r7, #10
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	200c      	movs	r0, #12
 80014c4:	f7ff ff08 	bl	80012d8 <RC522_to_card>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]

	if (status == true) {
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d018      	beq.n	8001504 <RC522_anti_coll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	73bb      	strb	r3, [r7, #14]
 80014d6:	e009      	b.n	80014ec <RC522_anti_coll+0x58>
			serNumCheck ^= serNum[i];
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	4053      	eors	r3, r2
 80014e4:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	3301      	adds	r3, #1
 80014ea:	73bb      	strb	r3, [r7, #14]
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d9f2      	bls.n	80014d8 <RC522_anti_coll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	7b7a      	ldrb	r2, [r7, #13]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <RC522_anti_coll+0x70>
			status = false;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <RC522_halt>:

void RC522_halt(void) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001514:	2350      	movs	r3, #80	; 0x50
 8001516:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	707b      	strb	r3, [r7, #1]
	RC522_calculate_CRC(buff, 2, &buff[2]);
 800151c:	463b      	mov	r3, r7
 800151e:	1c9a      	adds	r2, r3, #2
 8001520:	463b      	mov	r3, r7
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f80d 	bl	8001544 <RC522_calculate_CRC>

	RC522_to_card(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800152a:	463a      	mov	r2, r7
 800152c:	4639      	mov	r1, r7
 800152e:	1dbb      	adds	r3, r7, #6
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	2204      	movs	r2, #4
 8001536:	200c      	movs	r0, #12
 8001538:	f7ff fece 	bl	80012d8 <RC522_to_card>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <RC522_calculate_CRC>:

void RC522_calculate_CRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData) {
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	460b      	mov	r3, r1
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	RC522_clear_bit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8001552:	2104      	movs	r1, #4
 8001554:	2005      	movs	r0, #5
 8001556:	f7ff fe3e 	bl	80011d6 <RC522_clear_bit>
	RC522_set_bit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	200a      	movs	r0, #10
 800155e:	f7ff fe20 	bl	80011a2 <RC522_set_bit>

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
 8001566:	e00a      	b.n	800157e <RC522_calculate_CRC+0x3a>
		RC522_reg_write8(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	2009      	movs	r0, #9
 8001574:	f7ff fdf4 	bl	8001160 <RC522_reg_write8>
	for (i = 0; i < len; i++) {
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	3301      	adds	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
 800157e:	7dfa      	ldrb	r2, [r7, #23]
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3f0      	bcc.n	8001568 <RC522_calculate_CRC+0x24>
	}
	RC522_reg_write8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001586:	2103      	movs	r1, #3
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fde9 	bl	8001160 <RC522_reg_write8>

	//Wait CRC calculation is complete
	i = 0xFF;
 800158e:	23ff      	movs	r3, #255	; 0xff
 8001590:	75fb      	strb	r3, [r7, #23]
	do {
		n = RC522_reg_read8(MFRC522_REG_DIV_IRQ);
 8001592:	2005      	movs	r0, #5
 8001594:	f7ff fdbc 	bl	8001110 <RC522_reg_read8>
 8001598:	4603      	mov	r3, r0
 800159a:	75bb      	strb	r3, [r7, #22]
		i--;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	3b01      	subs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));      //CRCIrq = 1
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <RC522_calculate_CRC+0x6e>
 80015a8:	7dbb      	ldrb	r3, [r7, #22]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ef      	beq.n	8001592 <RC522_calculate_CRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = RC522_reg_read8(MFRC522_REG_CRC_RESULT_L);
 80015b2:	2022      	movs	r0, #34	; 0x22
 80015b4:	f7ff fdac 	bl	8001110 <RC522_reg_read8>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	701a      	strb	r2, [r3, #0]
	pOutData[1] = RC522_reg_read8(MFRC522_REG_CRC_RESULT_M);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1c5c      	adds	r4, r3, #1
 80015c4:	2021      	movs	r0, #33	; 0x21
 80015c6:	f7ff fda3 	bl	8001110 <RC522_reg_read8>
 80015ca:	4603      	mov	r3, r0
 80015cc:	7023      	strb	r3, [r4, #0]
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
	...

080015d8 <check_access>:
 *
 * Parameters: null
 *
 * Returns: null
 */
void check_access(void) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af02      	add	r7, sp, #8
	if (RC522_check_card(rfid_id)) {
 80015de:	48b4      	ldr	r0, [pc, #720]	; (80018b0 <check_access+0x2d8>)
 80015e0:	f7ff fe34 	bl	800124c <RC522_check_card>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8241 	beq.w	8001a6e <check_access+0x496>

		sprintf(buffer, "%x%x%x%x", rfid_id[0], rfid_id[1], rfid_id[2],
 80015ec:	4bb0      	ldr	r3, [pc, #704]	; (80018b0 <check_access+0x2d8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4baf      	ldr	r3, [pc, #700]	; (80018b0 <check_access+0x2d8>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	4618      	mov	r0, r3
 80015f8:	4bad      	ldr	r3, [pc, #692]	; (80018b0 <check_access+0x2d8>)
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	461a      	mov	r2, r3
				rfid_id[3]);
 80015fe:	4bac      	ldr	r3, [pc, #688]	; (80018b0 <check_access+0x2d8>)
 8001600:	78db      	ldrb	r3, [r3, #3]
		sprintf(buffer, "%x%x%x%x", rfid_id[0], rfid_id[1], rfid_id[2],
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	4603      	mov	r3, r0
 8001608:	460a      	mov	r2, r1
 800160a:	49aa      	ldr	r1, [pc, #680]	; (80018b4 <check_access+0x2dc>)
 800160c:	48aa      	ldr	r0, [pc, #680]	; (80018b8 <check_access+0x2e0>)
 800160e:	f000 fd5f 	bl	80020d0 <siprintf>
#ifdef DEBUG
		USART2_string_transmit("\r\n");
 8001612:	48aa      	ldr	r0, [pc, #680]	; (80018bc <check_access+0x2e4>)
 8001614:	f7fe fe98 	bl	8000348 <USART2_string_transmit>
#endif

		if ((strcmp(buffer, uid_1) == 0) || (strcmp(buffer, uid_2) == 0)
 8001618:	49a9      	ldr	r1, [pc, #676]	; (80018c0 <check_access+0x2e8>)
 800161a:	48a7      	ldr	r0, [pc, #668]	; (80018b8 <check_access+0x2e0>)
 800161c:	f7fe fde0 	bl	80001e0 <strcmp>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d014      	beq.n	8001650 <check_access+0x78>
 8001626:	49a7      	ldr	r1, [pc, #668]	; (80018c4 <check_access+0x2ec>)
 8001628:	48a3      	ldr	r0, [pc, #652]	; (80018b8 <check_access+0x2e0>)
 800162a:	f7fe fdd9 	bl	80001e0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00d      	beq.n	8001650 <check_access+0x78>
				|| (strcmp(buffer, uid_3) == 0)
 8001634:	49a4      	ldr	r1, [pc, #656]	; (80018c8 <check_access+0x2f0>)
 8001636:	48a0      	ldr	r0, [pc, #640]	; (80018b8 <check_access+0x2e0>)
 8001638:	f7fe fdd2 	bl	80001e0 <strcmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <check_access+0x78>
				|| (strcmp(buffer, uid_4) == 0)) {
 8001642:	49a2      	ldr	r1, [pc, #648]	; (80018cc <check_access+0x2f4>)
 8001644:	489c      	ldr	r0, [pc, #624]	; (80018b8 <check_access+0x2e0>)
 8001646:	f7fe fdcb 	bl	80001e0 <strcmp>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11f      	bne.n	8001690 <check_access+0xb8>
#ifdef DEBUG
			USART2_string_transmit("Access Granted \r\n");
 8001650:	489f      	ldr	r0, [pc, #636]	; (80018d0 <check_access+0x2f8>)
 8001652:	f7fe fe79 	bl	8000348 <USART2_string_transmit>
#endif
			SSD1106_gotoXY(0, 0);
 8001656:	2100      	movs	r1, #0
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fbef 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_puts("  Access Granted  ", &Font_7x10, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	499c      	ldr	r1, [pc, #624]	; (80018d4 <check_access+0x2fc>)
 8001662:	489d      	ldr	r0, [pc, #628]	; (80018d8 <check_access+0x300>)
 8001664:	f7ff fc80 	bl	8000f68 <SSD1106_puts>
			SSD1106_gotoXY(0, 10);
 8001668:	210a      	movs	r1, #10
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fbe6 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_clear_line();
 8001670:	f7ff fca8 	bl	8000fc4 <SSD1106_clear_line>
			SSD1106_gotoXY(0, 20);
 8001674:	2114      	movs	r1, #20
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fbe0 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_clear_line();
 800167c:	f7ff fca2 	bl	8000fc4 <SSD1106_clear_line>
			SSD1106_update_screen(); //display
 8001680:	f7ff fb44 	bl	8000d0c <SSD1106_update_screen>
			beeper_enable();
 8001684:	f7fe fe8a 	bl	800039c <beeper_enable>
			delay(50);
 8001688:	2032      	movs	r0, #50	; 0x32
 800168a:	f7fe fee1 	bl	8000450 <delay>
 800168e:	e1eb      	b.n	8001a68 <check_access+0x490>
		}

		else {
#ifdef DEBUG
			USART2_string_transmit("Card does not exist.\r\n");
 8001690:	4892      	ldr	r0, [pc, #584]	; (80018dc <check_access+0x304>)
 8001692:	f7fe fe59 	bl	8000348 <USART2_string_transmit>
#endif
			SSD1106_gotoXY(0, 0);
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fbcf 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_puts("Card doesn't exist", &Font_7x10, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	498c      	ldr	r1, [pc, #560]	; (80018d4 <check_access+0x2fc>)
 80016a2:	488f      	ldr	r0, [pc, #572]	; (80018e0 <check_access+0x308>)
 80016a4:	f7ff fc60 	bl	8000f68 <SSD1106_puts>
			voice_check();
 80016a8:	f000 fba2 	bl	8001df0 <voice_check>
#ifdef DEBUG
			USART2_string_transmit(
 80016ac:	488d      	ldr	r0, [pc, #564]	; (80018e4 <check_access+0x30c>)
 80016ae:	f7fe fe4b 	bl	8000348 <USART2_string_transmit>
					"Please enter 4 digit admin password for security pass\r\n");
#endif
			SSD1106_gotoXY(0, 10);
 80016b2:	210a      	movs	r1, #10
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fbc1 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_puts("   Please enter   ", &Font_7x10, 1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	4985      	ldr	r1, [pc, #532]	; (80018d4 <check_access+0x2fc>)
 80016be:	488a      	ldr	r0, [pc, #552]	; (80018e8 <check_access+0x310>)
 80016c0:	f7ff fc52 	bl	8000f68 <SSD1106_puts>
			SSD1106_gotoXY(0, 20);
 80016c4:	2114      	movs	r1, #20
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fbb8 	bl	8000e3c <SSD1106_gotoXY>
			SSD1106_puts("security password:", &Font_7x10, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4981      	ldr	r1, [pc, #516]	; (80018d4 <check_access+0x2fc>)
 80016d0:	4886      	ldr	r0, [pc, #536]	; (80018ec <check_access+0x314>)
 80016d2:	f7ff fc49 	bl	8000f68 <SSD1106_puts>
			SSD1106_update_screen(); //display
 80016d6:	f7ff fb19 	bl	8000d0c <SSD1106_update_screen>
			strcpy(received_string, check_key());
 80016da:	f7ff f80f 	bl	80006fc <check_key>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4883      	ldr	r0, [pc, #524]	; (80018f0 <check_access+0x318>)
 80016e4:	f000 fe85 	bl	80023f2 <strcpy>

			if (strcmp(security_password, received_string) == 0) {
 80016e8:	4981      	ldr	r1, [pc, #516]	; (80018f0 <check_access+0x318>)
 80016ea:	4882      	ldr	r0, [pc, #520]	; (80018f4 <check_access+0x31c>)
 80016ec:	f7fe fd78 	bl	80001e0 <strcmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d119      	bne.n	800172a <check_access+0x152>
				SSD1106_gotoXY(0, 0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fb9f 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("  Access Granted  ", &Font_7x10, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	4974      	ldr	r1, [pc, #464]	; (80018d4 <check_access+0x2fc>)
 8001702:	4875      	ldr	r0, [pc, #468]	; (80018d8 <check_access+0x300>)
 8001704:	f7ff fc30 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 10);
 8001708:	210a      	movs	r1, #10
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb96 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_clear_line();
 8001710:	f7ff fc58 	bl	8000fc4 <SSD1106_clear_line>
				SSD1106_gotoXY(0, 20);
 8001714:	2114      	movs	r1, #20
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fb90 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_clear_line();
 800171c:	f7ff fc52 	bl	8000fc4 <SSD1106_clear_line>
				SSD1106_update_screen(); //display
 8001720:	f7ff faf4 	bl	8000d0c <SSD1106_update_screen>
				beeper_enable();
 8001724:	f7fe fe3a 	bl	800039c <beeper_enable>
 8001728:	e19e      	b.n	8001a68 <check_access+0x490>
			} else if (strcmp(security_password, received_string) != 0) {
 800172a:	4971      	ldr	r1, [pc, #452]	; (80018f0 <check_access+0x318>)
 800172c:	4871      	ldr	r0, [pc, #452]	; (80018f4 <check_access+0x31c>)
 800172e:	f7fe fd57 	bl	80001e0 <strcmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8169 	beq.w	8001a0c <check_access+0x434>
				SSD1106_gotoXY(0, 0);
 800173a:	2100      	movs	r1, #0
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fb7d 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("Security password ", &Font_7x10, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	4963      	ldr	r1, [pc, #396]	; (80018d4 <check_access+0x2fc>)
 8001746:	486c      	ldr	r0, [pc, #432]	; (80018f8 <check_access+0x320>)
 8001748:	f7ff fc0e 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 10);
 800174c:	210a      	movs	r1, #10
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fb74 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("       wrong      ", &Font_7x10, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	495f      	ldr	r1, [pc, #380]	; (80018d4 <check_access+0x2fc>)
 8001758:	4868      	ldr	r0, [pc, #416]	; (80018fc <check_access+0x324>)
 800175a:	f7ff fc05 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 20);
 800175e:	2114      	movs	r1, #20
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fb6b 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_clear_line();
 8001766:	f7ff fc2d 	bl	8000fc4 <SSD1106_clear_line>
				SSD1106_update_screen(); //display
 800176a:	f7ff facf 	bl	8000d0c <SSD1106_update_screen>
				voice_check();
 800176e:	f000 fb3f 	bl	8001df0 <voice_check>
				for (unsigned char j = 0; j < VALID_CARDS; j++) {
 8001772:	2300      	movs	r3, #0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e014      	b.n	80017a2 <check_access+0x1ca>
					if (strcmp(buffer, myTags[j]) == 0) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a61      	ldr	r2, [pc, #388]	; (8001900 <check_access+0x328>)
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	4619      	mov	r1, r3
 8001782:	484d      	ldr	r0, [pc, #308]	; (80018b8 <check_access+0x2e0>)
 8001784:	f7fe fd2c 	bl	80001e0 <strcmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <check_access+0x1be>
						add_tag = false;
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <check_access+0x32c>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
						break;
 8001794:	e008      	b.n	80017a8 <check_access+0x1d0>
					}
					add_tag = true;
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <check_access+0x32c>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
				for (unsigned char j = 0; j < VALID_CARDS; j++) {
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3301      	adds	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d9e7      	bls.n	8001778 <check_access+0x1a0>
				}

				if ((i < VALID_CARDS) && (add_tag == true)) {
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <check_access+0x330>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f300 8129 	bgt.w	8001a04 <check_access+0x42c>
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <check_access+0x32c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8124 	beq.w	8001a04 <check_access+0x42c>
#ifdef DEBUG
					USART2_string_transmit(
 80017bc:	4853      	ldr	r0, [pc, #332]	; (800190c <check_access+0x334>)
 80017be:	f7fe fdc3 	bl	8000348 <USART2_string_transmit>
							"Please enter 4 digit admin password for adding a card\r\n");
#endif
					SSD1106_gotoXY(0, 0);
 80017c2:	2100      	movs	r1, #0
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fb39 	bl	8000e3c <SSD1106_gotoXY>
					SSD1106_puts("  Please enter    ", &Font_7x10, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	4941      	ldr	r1, [pc, #260]	; (80018d4 <check_access+0x2fc>)
 80017ce:	4850      	ldr	r0, [pc, #320]	; (8001910 <check_access+0x338>)
 80017d0:	f7ff fbca 	bl	8000f68 <SSD1106_puts>
					SSD1106_gotoXY(0, 10);
 80017d4:	210a      	movs	r1, #10
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fb30 	bl	8000e3c <SSD1106_gotoXY>
					SSD1106_puts("  admin password  ", &Font_7x10, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	493d      	ldr	r1, [pc, #244]	; (80018d4 <check_access+0x2fc>)
 80017e0:	484c      	ldr	r0, [pc, #304]	; (8001914 <check_access+0x33c>)
 80017e2:	f7ff fbc1 	bl	8000f68 <SSD1106_puts>
					SSD1106_gotoXY(0, 20);
 80017e6:	2114      	movs	r1, #20
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fb27 	bl	8000e3c <SSD1106_gotoXY>
					SSD1106_puts("  to add a card:  ", &Font_7x10, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	4938      	ldr	r1, [pc, #224]	; (80018d4 <check_access+0x2fc>)
 80017f2:	4849      	ldr	r0, [pc, #292]	; (8001918 <check_access+0x340>)
 80017f4:	f7ff fbb8 	bl	8000f68 <SSD1106_puts>
					SSD1106_update_screen(); //display
 80017f8:	f7ff fa88 	bl	8000d0c <SSD1106_update_screen>
					if (strcmp(admin_password, check_key()) == 0) {
 80017fc:	f7fe ff7e 	bl	80006fc <check_key>
 8001800:	4603      	mov	r3, r0
 8001802:	4619      	mov	r1, r3
 8001804:	4845      	ldr	r0, [pc, #276]	; (800191c <check_access+0x344>)
 8001806:	f7fe fceb 	bl	80001e0 <strcmp>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 80d7 	bne.w	80019c0 <check_access+0x3e8>
						myTags[i] = strdup(buffer);
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <check_access+0x330>)
 8001814:	681c      	ldr	r4, [r3, #0]
 8001816:	4828      	ldr	r0, [pc, #160]	; (80018b8 <check_access+0x2e0>)
 8001818:	f000 fd5a 	bl	80022d0 <strdup>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <check_access+0x328>)
 8001822:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
						if (i == 0) {
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <check_access+0x330>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <check_access+0x25e>
							strcpy(uid_3, buffer);
 800182e:	4922      	ldr	r1, [pc, #136]	; (80018b8 <check_access+0x2e0>)
 8001830:	4825      	ldr	r0, [pc, #148]	; (80018c8 <check_access+0x2f0>)
 8001832:	f000 fdde 	bl	80023f2 <strcpy>
						}
						if (i == 1) {
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <check_access+0x330>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d103      	bne.n	8001846 <check_access+0x26e>
							strcpy(uid_4, buffer);
 800183e:	491e      	ldr	r1, [pc, #120]	; (80018b8 <check_access+0x2e0>)
 8001840:	4822      	ldr	r0, [pc, #136]	; (80018cc <check_access+0x2f4>)
 8001842:	f000 fdd6 	bl	80023f2 <strcpy>
						}
#ifdef DEBUG
						USART2_string_transmit("Adding an access card\r\n");
 8001846:	4836      	ldr	r0, [pc, #216]	; (8001920 <check_access+0x348>)
 8001848:	f7fe fd7e 	bl	8000348 <USART2_string_transmit>
#endif
						SSD1106_gotoXY(0, 0);
 800184c:	2100      	movs	r1, #0
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff faf4 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_puts("    Card added    ", &Font_7x10, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	491f      	ldr	r1, [pc, #124]	; (80018d4 <check_access+0x2fc>)
 8001858:	4832      	ldr	r0, [pc, #200]	; (8001924 <check_access+0x34c>)
 800185a:	f7ff fb85 	bl	8000f68 <SSD1106_puts>
						SSD1106_gotoXY(0, 10);
 800185e:	210a      	movs	r1, #10
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff faeb 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_clear_line();
 8001866:	f7ff fbad 	bl	8000fc4 <SSD1106_clear_line>
						SSD1106_gotoXY(0, 20);
 800186a:	2114      	movs	r1, #20
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fae5 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_clear_line();
 8001872:	f7ff fba7 	bl	8000fc4 <SSD1106_clear_line>
						SSD1106_update_screen(); //display
 8001876:	f7ff fa49 	bl	8000d0c <SSD1106_update_screen>
#ifdef DEBUG
						USART2_string_transmit("\r\n");
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <check_access+0x2e4>)
 800187c:	f7fe fd64 	bl	8000348 <USART2_string_transmit>
#endif
						i++;
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <check_access+0x330>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <check_access+0x330>)
 8001888:	6013      	str	r3, [r2, #0]

						for (unsigned char j = 0; j < VALID_CARDS; j++) {
 800188a:	2300      	movs	r3, #0
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	e050      	b.n	8001932 <check_access+0x35a>
							if (strcmp(buffer, myTags[j]) == 0) {
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <check_access+0x328>)
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <check_access+0x2e0>)
 800189c:	f7fe fca0 	bl	80001e0 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d142      	bne.n	800192c <check_access+0x354>
								tagindex = j;
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <check_access+0x350>)
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	7013      	strb	r3, [r2, #0]
								break;
 80018ac:	e044      	b.n	8001938 <check_access+0x360>
 80018ae:	bf00      	nop
 80018b0:	20000510 	.word	0x20000510
 80018b4:	08003220 	.word	0x08003220
 80018b8:	20000550 	.word	0x20000550
 80018bc:	0800322c 	.word	0x0800322c
 80018c0:	20000020 	.word	0x20000020
 80018c4:	2000002c 	.word	0x2000002c
 80018c8:	2000051c 	.word	0x2000051c
 80018cc:	20000528 	.word	0x20000528
 80018d0:	08003230 	.word	0x08003230
 80018d4:	20000000 	.word	0x20000000
 80018d8:	08003244 	.word	0x08003244
 80018dc:	08003258 	.word	0x08003258
 80018e0:	08003270 	.word	0x08003270
 80018e4:	08003284 	.word	0x08003284
 80018e8:	080032bc 	.word	0x080032bc
 80018ec:	080032d0 	.word	0x080032d0
 80018f0:	20000534 	.word	0x20000534
 80018f4:	20000040 	.word	0x20000040
 80018f8:	080032e4 	.word	0x080032e4
 80018fc:	080032f8 	.word	0x080032f8
 8001900:	20000514 	.word	0x20000514
 8001904:	20000036 	.word	0x20000036
 8001908:	20000548 	.word	0x20000548
 800190c:	0800330c 	.word	0x0800330c
 8001910:	08003344 	.word	0x08003344
 8001914:	08003358 	.word	0x08003358
 8001918:	0800336c 	.word	0x0800336c
 800191c:	20000038 	.word	0x20000038
 8001920:	08003380 	.word	0x08003380
 8001924:	08003398 	.word	0x08003398
 8001928:	2000054c 	.word	0x2000054c
						for (unsigned char j = 0; j < VALID_CARDS; j++) {
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	3301      	adds	r3, #1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d9ab      	bls.n	8001890 <check_access+0x2b8>
							}
						}

						if (tagindex < VALID_CARDS) {
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <check_access+0x4a0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d81c      	bhi.n	800197a <check_access+0x3a2>
#ifdef DEBUG
							USART2_string_transmit("Access granted\r\n");
 8001940:	484e      	ldr	r0, [pc, #312]	; (8001a7c <check_access+0x4a4>)
 8001942:	f7fe fd01 	bl	8000348 <USART2_string_transmit>
#endif
							SSD1106_gotoXY(0, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fa77 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_puts("  Access Granted  ", &Font_7x10, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	494b      	ldr	r1, [pc, #300]	; (8001a80 <check_access+0x4a8>)
 8001952:	484c      	ldr	r0, [pc, #304]	; (8001a84 <check_access+0x4ac>)
 8001954:	f7ff fb08 	bl	8000f68 <SSD1106_puts>
							SSD1106_gotoXY(0, 10);
 8001958:	210a      	movs	r1, #10
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fa6e 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_clear_line();
 8001960:	f7ff fb30 	bl	8000fc4 <SSD1106_clear_line>
							SSD1106_gotoXY(0, 20);
 8001964:	2114      	movs	r1, #20
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fa68 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_clear_line();
 800196c:	f7ff fb2a 	bl	8000fc4 <SSD1106_clear_line>
							SSD1106_update_screen(); //display
 8001970:	f7ff f9cc 	bl	8000d0c <SSD1106_update_screen>
							beeper_enable();
 8001974:	f7fe fd12 	bl	800039c <beeper_enable>
 8001978:	e044      	b.n	8001a04 <check_access+0x42c>
						} else {
#ifdef DEBUG
							USART2_string_transmit("Access rejected\r\n");
 800197a:	4843      	ldr	r0, [pc, #268]	; (8001a88 <check_access+0x4b0>)
 800197c:	f7fe fce4 	bl	8000348 <USART2_string_transmit>
							USART2_string_transmit("Please try again\r\n");
 8001980:	4842      	ldr	r0, [pc, #264]	; (8001a8c <check_access+0x4b4>)
 8001982:	f7fe fce1 	bl	8000348 <USART2_string_transmit>
#endif
							SSD1106_gotoXY(0, 0);
 8001986:	2100      	movs	r1, #0
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fa57 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_puts("  Access Denied   ", &Font_7x10, 1);
 800198e:	2201      	movs	r2, #1
 8001990:	493b      	ldr	r1, [pc, #236]	; (8001a80 <check_access+0x4a8>)
 8001992:	483f      	ldr	r0, [pc, #252]	; (8001a90 <check_access+0x4b8>)
 8001994:	f7ff fae8 	bl	8000f68 <SSD1106_puts>
							SSD1106_gotoXY(0, 10);
 8001998:	210a      	movs	r1, #10
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fa4e 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_puts("     Try again.   ", &Font_7x10, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	4937      	ldr	r1, [pc, #220]	; (8001a80 <check_access+0x4a8>)
 80019a4:	483b      	ldr	r0, [pc, #236]	; (8001a94 <check_access+0x4bc>)
 80019a6:	f7ff fadf 	bl	8000f68 <SSD1106_puts>
							SSD1106_gotoXY(0, 20);
 80019aa:	2114      	movs	r1, #20
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fa45 	bl	8000e3c <SSD1106_gotoXY>
							SSD1106_clear_line();
 80019b2:	f7ff fb07 	bl	8000fc4 <SSD1106_clear_line>
							SSD1106_update_screen(); //display
 80019b6:	f7ff f9a9 	bl	8000d0c <SSD1106_update_screen>
							voice_check();
 80019ba:	f000 fa19 	bl	8001df0 <voice_check>
 80019be:	e021      	b.n	8001a04 <check_access+0x42c>
						}

					} else {
#ifdef DEBUG
						USART2_string_transmit(
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <check_access+0x4c0>)
 80019c2:	f7fe fcc1 	bl	8000348 <USART2_string_transmit>
								"Admin password wrong.Access Denied\r\n");
#endif
						SSD1106_gotoXY(0, 0);
 80019c6:	2100      	movs	r1, #0
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fa37 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_puts("  Admin password  ", &Font_7x10, 1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	492b      	ldr	r1, [pc, #172]	; (8001a80 <check_access+0x4a8>)
 80019d2:	4832      	ldr	r0, [pc, #200]	; (8001a9c <check_access+0x4c4>)
 80019d4:	f7ff fac8 	bl	8000f68 <SSD1106_puts>
						SSD1106_gotoXY(0, 10);
 80019d8:	210a      	movs	r1, #10
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fa2e 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_puts("      wrong.      ", &Font_7x10, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	4927      	ldr	r1, [pc, #156]	; (8001a80 <check_access+0x4a8>)
 80019e4:	482e      	ldr	r0, [pc, #184]	; (8001aa0 <check_access+0x4c8>)
 80019e6:	f7ff fabf 	bl	8000f68 <SSD1106_puts>
						SSD1106_gotoXY(0, 20);
 80019ea:	2114      	movs	r1, #20
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fa25 	bl	8000e3c <SSD1106_gotoXY>
						SSD1106_puts("  Access Denied   ", &Font_7x10, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	4922      	ldr	r1, [pc, #136]	; (8001a80 <check_access+0x4a8>)
 80019f6:	4826      	ldr	r0, [pc, #152]	; (8001a90 <check_access+0x4b8>)
 80019f8:	f7ff fab6 	bl	8000f68 <SSD1106_puts>
						SSD1106_update_screen(); //display
 80019fc:	f7ff f986 	bl	8000d0c <SSD1106_update_screen>
						voice_check();
 8001a00:	f000 f9f6 	bl	8001df0 <voice_check>

					}

				}

				delay(100);
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f7fe fd23 	bl	8000450 <delay>
 8001a0a:	e02d      	b.n	8001a68 <check_access+0x490>
			} else {
#ifdef DEBUG
				USART2_string_transmit("Admin password wrong.Access Denied\r\n");
 8001a0c:	4822      	ldr	r0, [pc, #136]	; (8001a98 <check_access+0x4c0>)
 8001a0e:	f7fe fc9b 	bl	8000348 <USART2_string_transmit>
				USART2_string_transmit("Please try again\r\n");
 8001a12:	481e      	ldr	r0, [pc, #120]	; (8001a8c <check_access+0x4b4>)
 8001a14:	f7fe fc98 	bl	8000348 <USART2_string_transmit>
#endif
				SSD1106_gotoXY(0, 0);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fa0e 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("  Admin password  ", &Font_7x10, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	4917      	ldr	r1, [pc, #92]	; (8001a80 <check_access+0x4a8>)
 8001a24:	481d      	ldr	r0, [pc, #116]	; (8001a9c <check_access+0x4c4>)
 8001a26:	f7ff fa9f 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 10);
 8001a2a:	210a      	movs	r1, #10
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fa05 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("      wrong.      ", &Font_7x10, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4912      	ldr	r1, [pc, #72]	; (8001a80 <check_access+0x4a8>)
 8001a36:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <check_access+0x4c8>)
 8001a38:	f7ff fa96 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 20);
 8001a3c:	2114      	movs	r1, #20
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff f9fc 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("  Access Denied   ", &Font_7x10, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	490e      	ldr	r1, [pc, #56]	; (8001a80 <check_access+0x4a8>)
 8001a48:	4811      	ldr	r0, [pc, #68]	; (8001a90 <check_access+0x4b8>)
 8001a4a:	f7ff fa8d 	bl	8000f68 <SSD1106_puts>
				SSD1106_gotoXY(0, 30);
 8001a4e:	211e      	movs	r1, #30
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff f9f3 	bl	8000e3c <SSD1106_gotoXY>
				SSD1106_puts("    Try again.    ", &Font_7x10, 1);
 8001a56:	2201      	movs	r2, #1
 8001a58:	4909      	ldr	r1, [pc, #36]	; (8001a80 <check_access+0x4a8>)
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <check_access+0x4cc>)
 8001a5c:	f7ff fa84 	bl	8000f68 <SSD1106_puts>
				SSD1106_update_screen(); //display
 8001a60:	f7ff f954 	bl	8000d0c <SSD1106_update_screen>
				voice_check();
 8001a64:	f000 f9c4 	bl	8001df0 <voice_check>
			}
		}
		delay(100);
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	f7fe fcf1 	bl	8000450 <delay>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000054c 	.word	0x2000054c
 8001a7c:	080033ac 	.word	0x080033ac
 8001a80:	20000000 	.word	0x20000000
 8001a84:	08003244 	.word	0x08003244
 8001a88:	080033c0 	.word	0x080033c0
 8001a8c:	080033d4 	.word	0x080033d4
 8001a90:	080033e8 	.word	0x080033e8
 8001a94:	080033fc 	.word	0x080033fc
 8001a98:	08003410 	.word	0x08003410
 8001a9c:	08003438 	.word	0x08003438
 8001aa0:	0800344c 	.word	0x0800344c
 8001aa4:	08003460 	.word	0x08003460

08001aa8 <spi_init>:
#include "stm32f4xx.h"
#include "delay.h"

#define AF5 0x05

void spi_init(void) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //enable clock forn gpio a
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <spi_init+0x68>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <spi_init+0x68>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN; //enable clock for spi1
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <spi_init+0x68>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <spi_init+0x68>)
 8001abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac2:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER |=
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <spi_init+0x6c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <spi_init+0x6c>)
 8001aca:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8001ace:	6013      	str	r3, [r2, #0]
	GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1; //Set alternate function mode for GPIO pins 5,6,7
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <spi_init+0x6c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <spi_init+0x6c>)
 8001ad6:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 8001ada:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_0); //Clears corresponding bits in MODER register for Pins 5,6,7
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR6
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <spi_init+0x6c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <spi_init+0x6c>)
 8001ae2:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 8001ae6:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR7; //Set pin 5,6,7 - > SCK, MISO, MOSI to high speed mode
	GPIOA->AFR[0] |= (AF5 << 20) | (AF5 << 24) | (AF5 << 28); //Sets the alternate function to the pins to be used for SPI Communication
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <spi_init+0x6c>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <spi_init+0x6c>)
 8001aee:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001af2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001af6:	6213      	str	r3, [r2, #32]
	SPI1->CR2 = 0; //Clears the control register 2 of SPI1
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <spi_init+0x70>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
	SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_MSTR | SPI_CR1_BR_2 | SPI_CR1_SSI
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <spi_init+0x70>)
 8001b00:	f44f 7259 	mov.w	r2, #868	; 0x364
 8001b04:	601a      	str	r2, [r3, #0]
			| SPI_CR1_SPE; //Set SPI1 as Master, Set Baud Rate, Enable s/w Slave Management, Enable SPI1

}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40013000 	.word	0x40013000

08001b1c <spi_transmit>:

int8_t spi_transmit(uint8_t *data, uint32_t size) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
	uint32_t start = millis();
 8001b2a:	f7fe fc6d 	bl	8000408 <millis>
 8001b2e:	60b8      	str	r0, [r7, #8]
	if(SPI1->DR)	//used to check the value in data register before transmission & clear it
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <spi_transmit+0xf0>)
 8001b32:	68db      	ldr	r3, [r3, #12]
	{

	}
	if(SPI1->SR)	//used to check the status register & ensure it is ready for SPI transmit operation
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <spi_transmit+0xf0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
	{

	}
	while (i < size) {
 8001b38:	e031      	b.n	8001b9e <spi_transmit+0x82>
		while (!((SPI1->SR) & SPI_SR_TXE)) {
			if (millis() - start > 1000) { //Wait for transmit buffer to be empty
 8001b3a:	f7fe fc65 	bl	8000408 <millis>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b48:	d905      	bls.n	8001b56 <spi_transmit+0x3a>
				printf("TXE timed out\r\n");
 8001b4a:	4831      	ldr	r0, [pc, #196]	; (8001c10 <spi_transmit+0xf4>)
 8001b4c:	f000 fab8 	bl	80020c0 <puts>
				return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	e056      	b.n	8001c04 <spi_transmit+0xe8>
		while (!((SPI1->SR) & SPI_SR_TXE)) {
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <spi_transmit+0xf0>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0eb      	beq.n	8001b3a <spi_transmit+0x1e>
			}
		}
		SPI1->DR = data[i];  //Transmit data byte by byte
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <spi_transmit+0xf0>)
 8001b6c:	60da      	str	r2, [r3, #12]
		while (!(SPI1->SR & SPI_SR_BSY)) {
 8001b6e:	e00d      	b.n	8001b8c <spi_transmit+0x70>
			if (millis() - start > 1000) {
 8001b70:	f7fe fc4a 	bl	8000408 <millis>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7e:	d905      	bls.n	8001b8c <spi_transmit+0x70>
				printf("BSY timed out\r\n");
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <spi_transmit+0xf8>)
 8001b82:	f000 fa9d 	bl	80020c0 <puts>
				return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e03b      	b.n	8001c04 <spi_transmit+0xe8>
		while (!(SPI1->SR & SPI_SR_BSY)) {
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <spi_transmit+0xf0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0eb      	beq.n	8001b70 <spi_transmit+0x54>
			}
		}
		i++;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
	while (i < size) {
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d8d7      	bhi.n	8001b56 <spi_transmit+0x3a>
	}
	while (!((SPI1->SR) & SPI_SR_TXE)) {
 8001ba6:	e00d      	b.n	8001bc4 <spi_transmit+0xa8>
		if (millis() - start > 1000) {
 8001ba8:	f7fe fc2e 	bl	8000408 <millis>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb6:	d905      	bls.n	8001bc4 <spi_transmit+0xa8>
			printf("TXE2 time dout\r\n");
 8001bb8:	4817      	ldr	r0, [pc, #92]	; (8001c18 <spi_transmit+0xfc>)
 8001bba:	f000 fa81 	bl	80020c0 <puts>
			return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e01f      	b.n	8001c04 <spi_transmit+0xe8>
	while (!((SPI1->SR) & SPI_SR_TXE)) {
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <spi_transmit+0xf0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0eb      	beq.n	8001ba8 <spi_transmit+0x8c>
		}
	} //Wait for Transmit buffer to be empty
	while ((SPI1->SR) & SPI_SR_BSY) {
 8001bd0:	e00d      	b.n	8001bee <spi_transmit+0xd2>
		if (millis() - start > 1000) {
 8001bd2:	f7fe fc19 	bl	8000408 <millis>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be0:	d905      	bls.n	8001bee <spi_transmit+0xd2>
			printf("BSY2 timed out\r\n");
 8001be2:	480e      	ldr	r0, [pc, #56]	; (8001c1c <spi_transmit+0x100>)
 8001be4:	f000 fa6c 	bl	80020c0 <puts>
			return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	e00a      	b.n	8001c04 <spi_transmit+0xe8>
	while ((SPI1->SR) & SPI_SR_BSY) {
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <spi_transmit+0xf0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1eb      	bne.n	8001bd2 <spi_transmit+0xb6>
		}
	} //Wait for transmit
	if(SPI1->DR)	//used to check the value in data register a transmission & clear it
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <spi_transmit+0xf0>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
	{

	}
	if(SPI1->SR)	//used to check the status register & ensure it is done with SPI receive operation
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <spi_transmit+0xf0>)
 8001c00:	689b      	ldr	r3, [r3, #8]
	{

	}
	return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40013000 	.word	0x40013000
 8001c10:	08003474 	.word	0x08003474
 8001c14:	08003484 	.word	0x08003484
 8001c18:	08003494 	.word	0x08003494
 8001c1c:	080034a4 	.word	0x080034a4

08001c20 <spi_receive>:

int8_t spi_receive(uint8_t *data, uint32_t size) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	while (size) {
 8001c2a:	e020      	b.n	8001c6e <spi_receive+0x4e>
		uint32_t start = millis();
 8001c2c:	f7fe fbec 	bl	8000408 <millis>
 8001c30:	60f8      	str	r0, [r7, #12]
		SPI1->DR = 0;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <spi_receive+0x60>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
		while (!(SPI1->SR & SPI_SR_RXNE)) {
 8001c38:	e009      	b.n	8001c4e <spi_receive+0x2e>
			if (millis() - start > 200) {
 8001c3a:	f7fe fbe5 	bl	8000408 <millis>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2bc8      	cmp	r3, #200	; 0xc8
 8001c46:	d902      	bls.n	8001c4e <spi_receive+0x2e>
				return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	e013      	b.n	8001c76 <spi_receive+0x56>
		while (!(SPI1->SR & SPI_SR_RXNE)) {
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <spi_receive+0x60>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0ef      	beq.n	8001c3a <spi_receive+0x1a>
			}
		}
		*data++ = (SPI1->DR);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <spi_receive+0x60>)
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	b2ca      	uxtb	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
		size--;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	603b      	str	r3, [r7, #0]
	while (size) {
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1db      	bne.n	8001c2c <spi_receive+0xc>
	}
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40013000 	.word	0x40013000

08001c84 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
		*ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
	}

	return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
		__io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
	}
	return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file) {
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_fstat>:

int _fstat(int file, struct stat *st) {
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file) {
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
		errno = ENOMEM;
 8001d90:	f000 fb02 	bl	8002398 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000564 	.word	0x20000564
 8001dc8:	200006b8 	.word	0x200006b8

08001dcc <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <voice_check>:
	/* Enable the AHB clock all GPIO port B */
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN);

}

void voice_check() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	/* Turn ON the Voice Module */
	GPIOD->BSRR |= GPIO_BSRR_BS1;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <voice_check+0x28>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <voice_check+0x28>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	6193      	str	r3, [r2, #24]

	delay(10);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f7fe fb25 	bl	8000450 <delay>

	/* Turn OFF the Voice Module */
	GPIOD->BSRR |= GPIO_BSRR_BR1;
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <voice_check+0x28>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <voice_check+0x28>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	6193      	str	r3, [r2, #24]
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40020c00 	.word	0x40020c00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffc1 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f000 faab 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7fe fe6f 	bl	8000b30 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001e60:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8001e64:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001e68:	200006b4 	.word	0x200006b4

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <std>:
 8001e70:	2300      	movs	r3, #0
 8001e72:	b510      	push	{r4, lr}
 8001e74:	4604      	mov	r4, r0
 8001e76:	e9c0 3300 	strd	r3, r3, [r0]
 8001e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e7e:	6083      	str	r3, [r0, #8]
 8001e80:	8181      	strh	r1, [r0, #12]
 8001e82:	6643      	str	r3, [r0, #100]	; 0x64
 8001e84:	81c2      	strh	r2, [r0, #14]
 8001e86:	6183      	str	r3, [r0, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	305c      	adds	r0, #92	; 0x5c
 8001e8e:	f000 fa17 	bl	80022c0 <memset>
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <std+0x58>)
 8001e94:	6263      	str	r3, [r4, #36]	; 0x24
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <std+0x5c>)
 8001e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <std+0x60>)
 8001e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <std+0x64>)
 8001ea0:	6323      	str	r3, [r4, #48]	; 0x30
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <std+0x68>)
 8001ea4:	6224      	str	r4, [r4, #32]
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	d006      	beq.n	8001eb8 <std+0x48>
 8001eaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001eae:	4294      	cmp	r4, r2
 8001eb0:	d002      	beq.n	8001eb8 <std+0x48>
 8001eb2:	33d0      	adds	r3, #208	; 0xd0
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	d105      	bne.n	8001ec4 <std+0x54>
 8001eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec0:	f000 ba94 	b.w	80023ec <__retarget_lock_init_recursive>
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	bf00      	nop
 8001ec8:	08002111 	.word	0x08002111
 8001ecc:	08002133 	.word	0x08002133
 8001ed0:	0800216b 	.word	0x0800216b
 8001ed4:	0800218f 	.word	0x0800218f
 8001ed8:	20000568 	.word	0x20000568

08001edc <stdio_exit_handler>:
 8001edc:	4a02      	ldr	r2, [pc, #8]	; (8001ee8 <stdio_exit_handler+0xc>)
 8001ede:	4903      	ldr	r1, [pc, #12]	; (8001eec <stdio_exit_handler+0x10>)
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <stdio_exit_handler+0x14>)
 8001ee2:	f000 b869 	b.w	8001fb8 <_fwalk_sglue>
 8001ee6:	bf00      	nop
 8001ee8:	20000048 	.word	0x20000048
 8001eec:	08002f75 	.word	0x08002f75
 8001ef0:	20000054 	.word	0x20000054

08001ef4 <cleanup_stdio>:
 8001ef4:	6841      	ldr	r1, [r0, #4]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <cleanup_stdio+0x34>)
 8001ef8:	4299      	cmp	r1, r3
 8001efa:	b510      	push	{r4, lr}
 8001efc:	4604      	mov	r4, r0
 8001efe:	d001      	beq.n	8001f04 <cleanup_stdio+0x10>
 8001f00:	f001 f838 	bl	8002f74 <_fflush_r>
 8001f04:	68a1      	ldr	r1, [r4, #8]
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <cleanup_stdio+0x38>)
 8001f08:	4299      	cmp	r1, r3
 8001f0a:	d002      	beq.n	8001f12 <cleanup_stdio+0x1e>
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f001 f831 	bl	8002f74 <_fflush_r>
 8001f12:	68e1      	ldr	r1, [r4, #12]
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <cleanup_stdio+0x3c>)
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d004      	beq.n	8001f24 <cleanup_stdio+0x30>
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f20:	f001 b828 	b.w	8002f74 <_fflush_r>
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	bf00      	nop
 8001f28:	20000568 	.word	0x20000568
 8001f2c:	200005d0 	.word	0x200005d0
 8001f30:	20000638 	.word	0x20000638

08001f34 <global_stdio_init.part.0>:
 8001f34:	b510      	push	{r4, lr}
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <global_stdio_init.part.0+0x30>)
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <global_stdio_init.part.0+0x34>)
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <global_stdio_init.part.0+0x38>)
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	4620      	mov	r0, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	2104      	movs	r1, #4
 8001f44:	f7ff ff94 	bl	8001e70 <std>
 8001f48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2109      	movs	r1, #9
 8001f50:	f7ff ff8e 	bl	8001e70 <std>
 8001f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001f58:	2202      	movs	r2, #2
 8001f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5e:	2112      	movs	r1, #18
 8001f60:	f7ff bf86 	b.w	8001e70 <std>
 8001f64:	200006a0 	.word	0x200006a0
 8001f68:	20000568 	.word	0x20000568
 8001f6c:	08001edd 	.word	0x08001edd

08001f70 <__sfp_lock_acquire>:
 8001f70:	4801      	ldr	r0, [pc, #4]	; (8001f78 <__sfp_lock_acquire+0x8>)
 8001f72:	f000 ba3c 	b.w	80023ee <__retarget_lock_acquire_recursive>
 8001f76:	bf00      	nop
 8001f78:	200006a9 	.word	0x200006a9

08001f7c <__sfp_lock_release>:
 8001f7c:	4801      	ldr	r0, [pc, #4]	; (8001f84 <__sfp_lock_release+0x8>)
 8001f7e:	f000 ba37 	b.w	80023f0 <__retarget_lock_release_recursive>
 8001f82:	bf00      	nop
 8001f84:	200006a9 	.word	0x200006a9

08001f88 <__sinit>:
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	f7ff fff0 	bl	8001f70 <__sfp_lock_acquire>
 8001f90:	6a23      	ldr	r3, [r4, #32]
 8001f92:	b11b      	cbz	r3, 8001f9c <__sinit+0x14>
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f98:	f7ff bff0 	b.w	8001f7c <__sfp_lock_release>
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__sinit+0x28>)
 8001f9e:	6223      	str	r3, [r4, #32]
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__sinit+0x2c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f5      	bne.n	8001f94 <__sinit+0xc>
 8001fa8:	f7ff ffc4 	bl	8001f34 <global_stdio_init.part.0>
 8001fac:	e7f2      	b.n	8001f94 <__sinit+0xc>
 8001fae:	bf00      	nop
 8001fb0:	08001ef5 	.word	0x08001ef5
 8001fb4:	200006a0 	.word	0x200006a0

08001fb8 <_fwalk_sglue>:
 8001fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fbc:	4607      	mov	r7, r0
 8001fbe:	4688      	mov	r8, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8001fcc:	d505      	bpl.n	8001fda <_fwalk_sglue+0x22>
 8001fce:	6824      	ldr	r4, [r4, #0]
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	d1f7      	bne.n	8001fc4 <_fwalk_sglue+0xc>
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fda:	89ab      	ldrh	r3, [r5, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d907      	bls.n	8001ff0 <_fwalk_sglue+0x38>
 8001fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	d003      	beq.n	8001ff0 <_fwalk_sglue+0x38>
 8001fe8:	4629      	mov	r1, r5
 8001fea:	4638      	mov	r0, r7
 8001fec:	47c0      	blx	r8
 8001fee:	4306      	orrs	r6, r0
 8001ff0:	3568      	adds	r5, #104	; 0x68
 8001ff2:	e7e9      	b.n	8001fc8 <_fwalk_sglue+0x10>

08001ff4 <iprintf>:
 8001ff4:	b40f      	push	{r0, r1, r2, r3}
 8001ff6:	b507      	push	{r0, r1, r2, lr}
 8001ff8:	4906      	ldr	r1, [pc, #24]	; (8002014 <iprintf+0x20>)
 8001ffa:	ab04      	add	r3, sp, #16
 8001ffc:	6808      	ldr	r0, [r1, #0]
 8001ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002002:	6881      	ldr	r1, [r0, #8]
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	f000 fc85 	bl	8002914 <_vfiprintf_r>
 800200a:	b003      	add	sp, #12
 800200c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002010:	b004      	add	sp, #16
 8002012:	4770      	bx	lr
 8002014:	200000a0 	.word	0x200000a0

08002018 <_puts_r>:
 8002018:	6a03      	ldr	r3, [r0, #32]
 800201a:	b570      	push	{r4, r5, r6, lr}
 800201c:	6884      	ldr	r4, [r0, #8]
 800201e:	4605      	mov	r5, r0
 8002020:	460e      	mov	r6, r1
 8002022:	b90b      	cbnz	r3, 8002028 <_puts_r+0x10>
 8002024:	f7ff ffb0 	bl	8001f88 <__sinit>
 8002028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800202a:	07db      	lsls	r3, r3, #31
 800202c:	d405      	bmi.n	800203a <_puts_r+0x22>
 800202e:	89a3      	ldrh	r3, [r4, #12]
 8002030:	0598      	lsls	r0, r3, #22
 8002032:	d402      	bmi.n	800203a <_puts_r+0x22>
 8002034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002036:	f000 f9da 	bl	80023ee <__retarget_lock_acquire_recursive>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	0719      	lsls	r1, r3, #28
 800203e:	d513      	bpl.n	8002068 <_puts_r+0x50>
 8002040:	6923      	ldr	r3, [r4, #16]
 8002042:	b18b      	cbz	r3, 8002068 <_puts_r+0x50>
 8002044:	3e01      	subs	r6, #1
 8002046:	68a3      	ldr	r3, [r4, #8]
 8002048:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800204c:	3b01      	subs	r3, #1
 800204e:	60a3      	str	r3, [r4, #8]
 8002050:	b9e9      	cbnz	r1, 800208e <_puts_r+0x76>
 8002052:	2b00      	cmp	r3, #0
 8002054:	da2e      	bge.n	80020b4 <_puts_r+0x9c>
 8002056:	4622      	mov	r2, r4
 8002058:	210a      	movs	r1, #10
 800205a:	4628      	mov	r0, r5
 800205c:	f000 f89b 	bl	8002196 <__swbuf_r>
 8002060:	3001      	adds	r0, #1
 8002062:	d007      	beq.n	8002074 <_puts_r+0x5c>
 8002064:	250a      	movs	r5, #10
 8002066:	e007      	b.n	8002078 <_puts_r+0x60>
 8002068:	4621      	mov	r1, r4
 800206a:	4628      	mov	r0, r5
 800206c:	f000 f8d0 	bl	8002210 <__swsetup_r>
 8002070:	2800      	cmp	r0, #0
 8002072:	d0e7      	beq.n	8002044 <_puts_r+0x2c>
 8002074:	f04f 35ff 	mov.w	r5, #4294967295
 8002078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800207a:	07da      	lsls	r2, r3, #31
 800207c:	d405      	bmi.n	800208a <_puts_r+0x72>
 800207e:	89a3      	ldrh	r3, [r4, #12]
 8002080:	059b      	lsls	r3, r3, #22
 8002082:	d402      	bmi.n	800208a <_puts_r+0x72>
 8002084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002086:	f000 f9b3 	bl	80023f0 <__retarget_lock_release_recursive>
 800208a:	4628      	mov	r0, r5
 800208c:	bd70      	pop	{r4, r5, r6, pc}
 800208e:	2b00      	cmp	r3, #0
 8002090:	da04      	bge.n	800209c <_puts_r+0x84>
 8002092:	69a2      	ldr	r2, [r4, #24]
 8002094:	429a      	cmp	r2, r3
 8002096:	dc06      	bgt.n	80020a6 <_puts_r+0x8e>
 8002098:	290a      	cmp	r1, #10
 800209a:	d004      	beq.n	80020a6 <_puts_r+0x8e>
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	6022      	str	r2, [r4, #0]
 80020a2:	7019      	strb	r1, [r3, #0]
 80020a4:	e7cf      	b.n	8002046 <_puts_r+0x2e>
 80020a6:	4622      	mov	r2, r4
 80020a8:	4628      	mov	r0, r5
 80020aa:	f000 f874 	bl	8002196 <__swbuf_r>
 80020ae:	3001      	adds	r0, #1
 80020b0:	d1c9      	bne.n	8002046 <_puts_r+0x2e>
 80020b2:	e7df      	b.n	8002074 <_puts_r+0x5c>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	250a      	movs	r5, #10
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	6022      	str	r2, [r4, #0]
 80020bc:	701d      	strb	r5, [r3, #0]
 80020be:	e7db      	b.n	8002078 <_puts_r+0x60>

080020c0 <puts>:
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <puts+0xc>)
 80020c2:	4601      	mov	r1, r0
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f7ff bfa7 	b.w	8002018 <_puts_r>
 80020ca:	bf00      	nop
 80020cc:	200000a0 	.word	0x200000a0

080020d0 <siprintf>:
 80020d0:	b40e      	push	{r1, r2, r3}
 80020d2:	b500      	push	{lr}
 80020d4:	b09c      	sub	sp, #112	; 0x70
 80020d6:	ab1d      	add	r3, sp, #116	; 0x74
 80020d8:	9002      	str	r0, [sp, #8]
 80020da:	9006      	str	r0, [sp, #24]
 80020dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <siprintf+0x38>)
 80020e2:	9107      	str	r1, [sp, #28]
 80020e4:	9104      	str	r1, [sp, #16]
 80020e6:	4909      	ldr	r1, [pc, #36]	; (800210c <siprintf+0x3c>)
 80020e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020ec:	9105      	str	r1, [sp, #20]
 80020ee:	6800      	ldr	r0, [r0, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	a902      	add	r1, sp, #8
 80020f4:	f000 fae6 	bl	80026c4 <_svfiprintf_r>
 80020f8:	9b02      	ldr	r3, [sp, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	b01c      	add	sp, #112	; 0x70
 8002100:	f85d eb04 	ldr.w	lr, [sp], #4
 8002104:	b003      	add	sp, #12
 8002106:	4770      	bx	lr
 8002108:	200000a0 	.word	0x200000a0
 800210c:	ffff0208 	.word	0xffff0208

08002110 <__sread>:
 8002110:	b510      	push	{r4, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	f000 f91a 	bl	8002350 <_read_r>
 800211c:	2800      	cmp	r0, #0
 800211e:	bfab      	itete	ge
 8002120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002122:	89a3      	ldrhlt	r3, [r4, #12]
 8002124:	181b      	addge	r3, r3, r0
 8002126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800212a:	bfac      	ite	ge
 800212c:	6563      	strge	r3, [r4, #84]	; 0x54
 800212e:	81a3      	strhlt	r3, [r4, #12]
 8002130:	bd10      	pop	{r4, pc}

08002132 <__swrite>:
 8002132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002136:	461f      	mov	r7, r3
 8002138:	898b      	ldrh	r3, [r1, #12]
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	4605      	mov	r5, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4616      	mov	r6, r2
 8002142:	d505      	bpl.n	8002150 <__swrite+0x1e>
 8002144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002148:	2302      	movs	r3, #2
 800214a:	2200      	movs	r2, #0
 800214c:	f000 f8ee 	bl	800232c <_lseek_r>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	4632      	mov	r2, r6
 800215e:	463b      	mov	r3, r7
 8002160:	4628      	mov	r0, r5
 8002162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	f000 b905 	b.w	8002374 <_write_r>

0800216a <__sseek>:
 800216a:	b510      	push	{r4, lr}
 800216c:	460c      	mov	r4, r1
 800216e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002172:	f000 f8db 	bl	800232c <_lseek_r>
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	bf15      	itete	ne
 800217c:	6560      	strne	r0, [r4, #84]	; 0x54
 800217e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002186:	81a3      	strheq	r3, [r4, #12]
 8002188:	bf18      	it	ne
 800218a:	81a3      	strhne	r3, [r4, #12]
 800218c:	bd10      	pop	{r4, pc}

0800218e <__sclose>:
 800218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002192:	f000 b8bb 	b.w	800230c <_close_r>

08002196 <__swbuf_r>:
 8002196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002198:	460e      	mov	r6, r1
 800219a:	4614      	mov	r4, r2
 800219c:	4605      	mov	r5, r0
 800219e:	b118      	cbz	r0, 80021a8 <__swbuf_r+0x12>
 80021a0:	6a03      	ldr	r3, [r0, #32]
 80021a2:	b90b      	cbnz	r3, 80021a8 <__swbuf_r+0x12>
 80021a4:	f7ff fef0 	bl	8001f88 <__sinit>
 80021a8:	69a3      	ldr	r3, [r4, #24]
 80021aa:	60a3      	str	r3, [r4, #8]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	071a      	lsls	r2, r3, #28
 80021b0:	d525      	bpl.n	80021fe <__swbuf_r+0x68>
 80021b2:	6923      	ldr	r3, [r4, #16]
 80021b4:	b31b      	cbz	r3, 80021fe <__swbuf_r+0x68>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	6922      	ldr	r2, [r4, #16]
 80021ba:	1a98      	subs	r0, r3, r2
 80021bc:	6963      	ldr	r3, [r4, #20]
 80021be:	b2f6      	uxtb	r6, r6
 80021c0:	4283      	cmp	r3, r0
 80021c2:	4637      	mov	r7, r6
 80021c4:	dc04      	bgt.n	80021d0 <__swbuf_r+0x3a>
 80021c6:	4621      	mov	r1, r4
 80021c8:	4628      	mov	r0, r5
 80021ca:	f000 fed3 	bl	8002f74 <_fflush_r>
 80021ce:	b9e0      	cbnz	r0, 800220a <__swbuf_r+0x74>
 80021d0:	68a3      	ldr	r3, [r4, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60a3      	str	r3, [r4, #8]
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	6022      	str	r2, [r4, #0]
 80021dc:	701e      	strb	r6, [r3, #0]
 80021de:	6962      	ldr	r2, [r4, #20]
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d004      	beq.n	80021f0 <__swbuf_r+0x5a>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	07db      	lsls	r3, r3, #31
 80021ea:	d506      	bpl.n	80021fa <__swbuf_r+0x64>
 80021ec:	2e0a      	cmp	r6, #10
 80021ee:	d104      	bne.n	80021fa <__swbuf_r+0x64>
 80021f0:	4621      	mov	r1, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 febe 	bl	8002f74 <_fflush_r>
 80021f8:	b938      	cbnz	r0, 800220a <__swbuf_r+0x74>
 80021fa:	4638      	mov	r0, r7
 80021fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fe:	4621      	mov	r1, r4
 8002200:	4628      	mov	r0, r5
 8002202:	f000 f805 	bl	8002210 <__swsetup_r>
 8002206:	2800      	cmp	r0, #0
 8002208:	d0d5      	beq.n	80021b6 <__swbuf_r+0x20>
 800220a:	f04f 37ff 	mov.w	r7, #4294967295
 800220e:	e7f4      	b.n	80021fa <__swbuf_r+0x64>

08002210 <__swsetup_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <__swsetup_r+0xac>)
 8002214:	4605      	mov	r5, r0
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	460c      	mov	r4, r1
 800221a:	b118      	cbz	r0, 8002224 <__swsetup_r+0x14>
 800221c:	6a03      	ldr	r3, [r0, #32]
 800221e:	b90b      	cbnz	r3, 8002224 <__swsetup_r+0x14>
 8002220:	f7ff feb2 	bl	8001f88 <__sinit>
 8002224:	89a3      	ldrh	r3, [r4, #12]
 8002226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800222a:	0718      	lsls	r0, r3, #28
 800222c:	d422      	bmi.n	8002274 <__swsetup_r+0x64>
 800222e:	06d9      	lsls	r1, r3, #27
 8002230:	d407      	bmi.n	8002242 <__swsetup_r+0x32>
 8002232:	2309      	movs	r3, #9
 8002234:	602b      	str	r3, [r5, #0]
 8002236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	e034      	b.n	80022ac <__swsetup_r+0x9c>
 8002242:	0758      	lsls	r0, r3, #29
 8002244:	d512      	bpl.n	800226c <__swsetup_r+0x5c>
 8002246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002248:	b141      	cbz	r1, 800225c <__swsetup_r+0x4c>
 800224a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800224e:	4299      	cmp	r1, r3
 8002250:	d002      	beq.n	8002258 <__swsetup_r+0x48>
 8002252:	4628      	mov	r0, r5
 8002254:	f000 f8e4 	bl	8002420 <_free_r>
 8002258:	2300      	movs	r3, #0
 800225a:	6363      	str	r3, [r4, #52]	; 0x34
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002262:	81a3      	strh	r3, [r4, #12]
 8002264:	2300      	movs	r3, #0
 8002266:	6063      	str	r3, [r4, #4]
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	6023      	str	r3, [r4, #0]
 800226c:	89a3      	ldrh	r3, [r4, #12]
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	81a3      	strh	r3, [r4, #12]
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	b94b      	cbnz	r3, 800228c <__swsetup_r+0x7c>
 8002278:	89a3      	ldrh	r3, [r4, #12]
 800227a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800227e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002282:	d003      	beq.n	800228c <__swsetup_r+0x7c>
 8002284:	4621      	mov	r1, r4
 8002286:	4628      	mov	r0, r5
 8002288:	f000 fec2 	bl	8003010 <__smakebuf_r>
 800228c:	89a0      	ldrh	r0, [r4, #12]
 800228e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002292:	f010 0301 	ands.w	r3, r0, #1
 8002296:	d00a      	beq.n	80022ae <__swsetup_r+0x9e>
 8002298:	2300      	movs	r3, #0
 800229a:	60a3      	str	r3, [r4, #8]
 800229c:	6963      	ldr	r3, [r4, #20]
 800229e:	425b      	negs	r3, r3
 80022a0:	61a3      	str	r3, [r4, #24]
 80022a2:	6923      	ldr	r3, [r4, #16]
 80022a4:	b943      	cbnz	r3, 80022b8 <__swsetup_r+0xa8>
 80022a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022aa:	d1c4      	bne.n	8002236 <__swsetup_r+0x26>
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
 80022ae:	0781      	lsls	r1, r0, #30
 80022b0:	bf58      	it	pl
 80022b2:	6963      	ldrpl	r3, [r4, #20]
 80022b4:	60a3      	str	r3, [r4, #8]
 80022b6:	e7f4      	b.n	80022a2 <__swsetup_r+0x92>
 80022b8:	2000      	movs	r0, #0
 80022ba:	e7f7      	b.n	80022ac <__swsetup_r+0x9c>
 80022bc:	200000a0 	.word	0x200000a0

080022c0 <memset>:
 80022c0:	4402      	add	r2, r0
 80022c2:	4603      	mov	r3, r0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d100      	bne.n	80022ca <memset+0xa>
 80022c8:	4770      	bx	lr
 80022ca:	f803 1b01 	strb.w	r1, [r3], #1
 80022ce:	e7f9      	b.n	80022c4 <memset+0x4>

080022d0 <strdup>:
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <strdup+0xc>)
 80022d2:	4601      	mov	r1, r0
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	f000 b803 	b.w	80022e0 <_strdup_r>
 80022da:	bf00      	nop
 80022dc:	200000a0 	.word	0x200000a0

080022e0 <_strdup_r>:
 80022e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	4608      	mov	r0, r1
 80022e6:	460d      	mov	r5, r1
 80022e8:	f7fd ff84 	bl	80001f4 <strlen>
 80022ec:	1c42      	adds	r2, r0, #1
 80022ee:	4611      	mov	r1, r2
 80022f0:	4620      	mov	r0, r4
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	f000 f900 	bl	80024f8 <_malloc_r>
 80022f8:	4604      	mov	r4, r0
 80022fa:	b118      	cbz	r0, 8002304 <_strdup_r+0x24>
 80022fc:	9a01      	ldr	r2, [sp, #4]
 80022fe:	4629      	mov	r1, r5
 8002300:	f000 f87f 	bl	8002402 <memcpy>
 8002304:	4620      	mov	r0, r4
 8002306:	b003      	add	sp, #12
 8002308:	bd30      	pop	{r4, r5, pc}
	...

0800230c <_close_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d06      	ldr	r5, [pc, #24]	; (8002328 <_close_r+0x1c>)
 8002310:	2300      	movs	r3, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7ff fced 	bl	8001cf6 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_close_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_close_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	200006a4 	.word	0x200006a4

0800232c <_lseek_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	; (800234c <_lseek_r+0x20>)
 8002330:	4604      	mov	r4, r0
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	2200      	movs	r2, #0
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f7ff fd02 	bl	8001d44 <_lseek>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_lseek_r+0x1e>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_lseek_r+0x1e>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	200006a4 	.word	0x200006a4

08002350 <_read_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d07      	ldr	r5, [pc, #28]	; (8002370 <_read_r+0x20>)
 8002354:	4604      	mov	r4, r0
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	2200      	movs	r2, #0
 800235c:	602a      	str	r2, [r5, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fc90 	bl	8001c84 <_read>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_read_r+0x1e>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b103      	cbz	r3, 800236e <_read_r+0x1e>
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	200006a4 	.word	0x200006a4

08002374 <_write_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4d07      	ldr	r5, [pc, #28]	; (8002394 <_write_r+0x20>)
 8002378:	4604      	mov	r4, r0
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	2200      	movs	r2, #0
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f7ff fc9b 	bl	8001cbe <_write>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_write_r+0x1e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_write_r+0x1e>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	200006a4 	.word	0x200006a4

08002398 <__errno>:
 8002398:	4b01      	ldr	r3, [pc, #4]	; (80023a0 <__errno+0x8>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200000a0 	.word	0x200000a0

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d0d      	ldr	r5, [pc, #52]	; (80023dc <__libc_init_array+0x38>)
 80023a8:	4c0d      	ldr	r4, [pc, #52]	; (80023e0 <__libc_init_array+0x3c>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	2600      	movs	r6, #0
 80023b0:	42a6      	cmp	r6, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	4d0b      	ldr	r5, [pc, #44]	; (80023e4 <__libc_init_array+0x40>)
 80023b6:	4c0c      	ldr	r4, [pc, #48]	; (80023e8 <__libc_init_array+0x44>)
 80023b8:	f000 feea 	bl	8003190 <_init>
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	2600      	movs	r6, #0
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023cc:	4798      	blx	r3
 80023ce:	3601      	adds	r6, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d6:	4798      	blx	r3
 80023d8:	3601      	adds	r6, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	08003c54 	.word	0x08003c54
 80023e0:	08003c54 	.word	0x08003c54
 80023e4:	08003c54 	.word	0x08003c54
 80023e8:	08003c58 	.word	0x08003c58

080023ec <__retarget_lock_init_recursive>:
 80023ec:	4770      	bx	lr

080023ee <__retarget_lock_acquire_recursive>:
 80023ee:	4770      	bx	lr

080023f0 <__retarget_lock_release_recursive>:
 80023f0:	4770      	bx	lr

080023f2 <strcpy>:
 80023f2:	4603      	mov	r3, r0
 80023f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023f8:	f803 2b01 	strb.w	r2, [r3], #1
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d1f9      	bne.n	80023f4 <strcpy+0x2>
 8002400:	4770      	bx	lr

08002402 <memcpy>:
 8002402:	440a      	add	r2, r1
 8002404:	4291      	cmp	r1, r2
 8002406:	f100 33ff 	add.w	r3, r0, #4294967295
 800240a:	d100      	bne.n	800240e <memcpy+0xc>
 800240c:	4770      	bx	lr
 800240e:	b510      	push	{r4, lr}
 8002410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002418:	4291      	cmp	r1, r2
 800241a:	d1f9      	bne.n	8002410 <memcpy+0xe>
 800241c:	bd10      	pop	{r4, pc}
	...

08002420 <_free_r>:
 8002420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002422:	2900      	cmp	r1, #0
 8002424:	d044      	beq.n	80024b0 <_free_r+0x90>
 8002426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800242a:	9001      	str	r0, [sp, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f1a1 0404 	sub.w	r4, r1, #4
 8002432:	bfb8      	it	lt
 8002434:	18e4      	addlt	r4, r4, r3
 8002436:	f000 f8df 	bl	80025f8 <__malloc_lock>
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <_free_r+0x94>)
 800243c:	9801      	ldr	r0, [sp, #4]
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	b933      	cbnz	r3, 8002450 <_free_r+0x30>
 8002442:	6063      	str	r3, [r4, #4]
 8002444:	6014      	str	r4, [r2, #0]
 8002446:	b003      	add	sp, #12
 8002448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800244c:	f000 b8da 	b.w	8002604 <__malloc_unlock>
 8002450:	42a3      	cmp	r3, r4
 8002452:	d908      	bls.n	8002466 <_free_r+0x46>
 8002454:	6825      	ldr	r5, [r4, #0]
 8002456:	1961      	adds	r1, r4, r5
 8002458:	428b      	cmp	r3, r1
 800245a:	bf01      	itttt	eq
 800245c:	6819      	ldreq	r1, [r3, #0]
 800245e:	685b      	ldreq	r3, [r3, #4]
 8002460:	1949      	addeq	r1, r1, r5
 8002462:	6021      	streq	r1, [r4, #0]
 8002464:	e7ed      	b.n	8002442 <_free_r+0x22>
 8002466:	461a      	mov	r2, r3
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	b10b      	cbz	r3, 8002470 <_free_r+0x50>
 800246c:	42a3      	cmp	r3, r4
 800246e:	d9fa      	bls.n	8002466 <_free_r+0x46>
 8002470:	6811      	ldr	r1, [r2, #0]
 8002472:	1855      	adds	r5, r2, r1
 8002474:	42a5      	cmp	r5, r4
 8002476:	d10b      	bne.n	8002490 <_free_r+0x70>
 8002478:	6824      	ldr	r4, [r4, #0]
 800247a:	4421      	add	r1, r4
 800247c:	1854      	adds	r4, r2, r1
 800247e:	42a3      	cmp	r3, r4
 8002480:	6011      	str	r1, [r2, #0]
 8002482:	d1e0      	bne.n	8002446 <_free_r+0x26>
 8002484:	681c      	ldr	r4, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	6053      	str	r3, [r2, #4]
 800248a:	440c      	add	r4, r1
 800248c:	6014      	str	r4, [r2, #0]
 800248e:	e7da      	b.n	8002446 <_free_r+0x26>
 8002490:	d902      	bls.n	8002498 <_free_r+0x78>
 8002492:	230c      	movs	r3, #12
 8002494:	6003      	str	r3, [r0, #0]
 8002496:	e7d6      	b.n	8002446 <_free_r+0x26>
 8002498:	6825      	ldr	r5, [r4, #0]
 800249a:	1961      	adds	r1, r4, r5
 800249c:	428b      	cmp	r3, r1
 800249e:	bf04      	itt	eq
 80024a0:	6819      	ldreq	r1, [r3, #0]
 80024a2:	685b      	ldreq	r3, [r3, #4]
 80024a4:	6063      	str	r3, [r4, #4]
 80024a6:	bf04      	itt	eq
 80024a8:	1949      	addeq	r1, r1, r5
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	6054      	str	r4, [r2, #4]
 80024ae:	e7ca      	b.n	8002446 <_free_r+0x26>
 80024b0:	b003      	add	sp, #12
 80024b2:	bd30      	pop	{r4, r5, pc}
 80024b4:	200006ac 	.word	0x200006ac

080024b8 <sbrk_aligned>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4e0e      	ldr	r6, [pc, #56]	; (80024f4 <sbrk_aligned+0x3c>)
 80024bc:	460c      	mov	r4, r1
 80024be:	6831      	ldr	r1, [r6, #0]
 80024c0:	4605      	mov	r5, r0
 80024c2:	b911      	cbnz	r1, 80024ca <sbrk_aligned+0x12>
 80024c4:	f000 fe1c 	bl	8003100 <_sbrk_r>
 80024c8:	6030      	str	r0, [r6, #0]
 80024ca:	4621      	mov	r1, r4
 80024cc:	4628      	mov	r0, r5
 80024ce:	f000 fe17 	bl	8003100 <_sbrk_r>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	d00a      	beq.n	80024ec <sbrk_aligned+0x34>
 80024d6:	1cc4      	adds	r4, r0, #3
 80024d8:	f024 0403 	bic.w	r4, r4, #3
 80024dc:	42a0      	cmp	r0, r4
 80024de:	d007      	beq.n	80024f0 <sbrk_aligned+0x38>
 80024e0:	1a21      	subs	r1, r4, r0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 fe0c 	bl	8003100 <_sbrk_r>
 80024e8:	3001      	adds	r0, #1
 80024ea:	d101      	bne.n	80024f0 <sbrk_aligned+0x38>
 80024ec:	f04f 34ff 	mov.w	r4, #4294967295
 80024f0:	4620      	mov	r0, r4
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	200006b0 	.word	0x200006b0

080024f8 <_malloc_r>:
 80024f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024fc:	1ccd      	adds	r5, r1, #3
 80024fe:	f025 0503 	bic.w	r5, r5, #3
 8002502:	3508      	adds	r5, #8
 8002504:	2d0c      	cmp	r5, #12
 8002506:	bf38      	it	cc
 8002508:	250c      	movcc	r5, #12
 800250a:	2d00      	cmp	r5, #0
 800250c:	4607      	mov	r7, r0
 800250e:	db01      	blt.n	8002514 <_malloc_r+0x1c>
 8002510:	42a9      	cmp	r1, r5
 8002512:	d905      	bls.n	8002520 <_malloc_r+0x28>
 8002514:	230c      	movs	r3, #12
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	2600      	movs	r6, #0
 800251a:	4630      	mov	r0, r6
 800251c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025f4 <_malloc_r+0xfc>
 8002524:	f000 f868 	bl	80025f8 <__malloc_lock>
 8002528:	f8d8 3000 	ldr.w	r3, [r8]
 800252c:	461c      	mov	r4, r3
 800252e:	bb5c      	cbnz	r4, 8002588 <_malloc_r+0x90>
 8002530:	4629      	mov	r1, r5
 8002532:	4638      	mov	r0, r7
 8002534:	f7ff ffc0 	bl	80024b8 <sbrk_aligned>
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	4604      	mov	r4, r0
 800253c:	d155      	bne.n	80025ea <_malloc_r+0xf2>
 800253e:	f8d8 4000 	ldr.w	r4, [r8]
 8002542:	4626      	mov	r6, r4
 8002544:	2e00      	cmp	r6, #0
 8002546:	d145      	bne.n	80025d4 <_malloc_r+0xdc>
 8002548:	2c00      	cmp	r4, #0
 800254a:	d048      	beq.n	80025de <_malloc_r+0xe6>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	4631      	mov	r1, r6
 8002550:	4638      	mov	r0, r7
 8002552:	eb04 0903 	add.w	r9, r4, r3
 8002556:	f000 fdd3 	bl	8003100 <_sbrk_r>
 800255a:	4581      	cmp	r9, r0
 800255c:	d13f      	bne.n	80025de <_malloc_r+0xe6>
 800255e:	6821      	ldr	r1, [r4, #0]
 8002560:	1a6d      	subs	r5, r5, r1
 8002562:	4629      	mov	r1, r5
 8002564:	4638      	mov	r0, r7
 8002566:	f7ff ffa7 	bl	80024b8 <sbrk_aligned>
 800256a:	3001      	adds	r0, #1
 800256c:	d037      	beq.n	80025de <_malloc_r+0xe6>
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	442b      	add	r3, r5
 8002572:	6023      	str	r3, [r4, #0]
 8002574:	f8d8 3000 	ldr.w	r3, [r8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d038      	beq.n	80025ee <_malloc_r+0xf6>
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	42a2      	cmp	r2, r4
 8002580:	d12b      	bne.n	80025da <_malloc_r+0xe2>
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	e00f      	b.n	80025a8 <_malloc_r+0xb0>
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	1b52      	subs	r2, r2, r5
 800258c:	d41f      	bmi.n	80025ce <_malloc_r+0xd6>
 800258e:	2a0b      	cmp	r2, #11
 8002590:	d917      	bls.n	80025c2 <_malloc_r+0xca>
 8002592:	1961      	adds	r1, r4, r5
 8002594:	42a3      	cmp	r3, r4
 8002596:	6025      	str	r5, [r4, #0]
 8002598:	bf18      	it	ne
 800259a:	6059      	strne	r1, [r3, #4]
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	bf08      	it	eq
 80025a0:	f8c8 1000 	streq.w	r1, [r8]
 80025a4:	5162      	str	r2, [r4, r5]
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	4638      	mov	r0, r7
 80025aa:	f104 060b 	add.w	r6, r4, #11
 80025ae:	f000 f829 	bl	8002604 <__malloc_unlock>
 80025b2:	f026 0607 	bic.w	r6, r6, #7
 80025b6:	1d23      	adds	r3, r4, #4
 80025b8:	1af2      	subs	r2, r6, r3
 80025ba:	d0ae      	beq.n	800251a <_malloc_r+0x22>
 80025bc:	1b9b      	subs	r3, r3, r6
 80025be:	50a3      	str	r3, [r4, r2]
 80025c0:	e7ab      	b.n	800251a <_malloc_r+0x22>
 80025c2:	42a3      	cmp	r3, r4
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	d1dd      	bne.n	8002584 <_malloc_r+0x8c>
 80025c8:	f8c8 2000 	str.w	r2, [r8]
 80025cc:	e7ec      	b.n	80025a8 <_malloc_r+0xb0>
 80025ce:	4623      	mov	r3, r4
 80025d0:	6864      	ldr	r4, [r4, #4]
 80025d2:	e7ac      	b.n	800252e <_malloc_r+0x36>
 80025d4:	4634      	mov	r4, r6
 80025d6:	6876      	ldr	r6, [r6, #4]
 80025d8:	e7b4      	b.n	8002544 <_malloc_r+0x4c>
 80025da:	4613      	mov	r3, r2
 80025dc:	e7cc      	b.n	8002578 <_malloc_r+0x80>
 80025de:	230c      	movs	r3, #12
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4638      	mov	r0, r7
 80025e4:	f000 f80e 	bl	8002604 <__malloc_unlock>
 80025e8:	e797      	b.n	800251a <_malloc_r+0x22>
 80025ea:	6025      	str	r5, [r4, #0]
 80025ec:	e7dc      	b.n	80025a8 <_malloc_r+0xb0>
 80025ee:	605b      	str	r3, [r3, #4]
 80025f0:	deff      	udf	#255	; 0xff
 80025f2:	bf00      	nop
 80025f4:	200006ac 	.word	0x200006ac

080025f8 <__malloc_lock>:
 80025f8:	4801      	ldr	r0, [pc, #4]	; (8002600 <__malloc_lock+0x8>)
 80025fa:	f7ff bef8 	b.w	80023ee <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	200006a8 	.word	0x200006a8

08002604 <__malloc_unlock>:
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <__malloc_unlock+0x8>)
 8002606:	f7ff bef3 	b.w	80023f0 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	200006a8 	.word	0x200006a8

08002610 <__ssputs_r>:
 8002610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002614:	688e      	ldr	r6, [r1, #8]
 8002616:	461f      	mov	r7, r3
 8002618:	42be      	cmp	r6, r7
 800261a:	680b      	ldr	r3, [r1, #0]
 800261c:	4682      	mov	sl, r0
 800261e:	460c      	mov	r4, r1
 8002620:	4690      	mov	r8, r2
 8002622:	d82c      	bhi.n	800267e <__ssputs_r+0x6e>
 8002624:	898a      	ldrh	r2, [r1, #12]
 8002626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800262a:	d026      	beq.n	800267a <__ssputs_r+0x6a>
 800262c:	6965      	ldr	r5, [r4, #20]
 800262e:	6909      	ldr	r1, [r1, #16]
 8002630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002634:	eba3 0901 	sub.w	r9, r3, r1
 8002638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800263c:	1c7b      	adds	r3, r7, #1
 800263e:	444b      	add	r3, r9
 8002640:	106d      	asrs	r5, r5, #1
 8002642:	429d      	cmp	r5, r3
 8002644:	bf38      	it	cc
 8002646:	461d      	movcc	r5, r3
 8002648:	0553      	lsls	r3, r2, #21
 800264a:	d527      	bpl.n	800269c <__ssputs_r+0x8c>
 800264c:	4629      	mov	r1, r5
 800264e:	f7ff ff53 	bl	80024f8 <_malloc_r>
 8002652:	4606      	mov	r6, r0
 8002654:	b360      	cbz	r0, 80026b0 <__ssputs_r+0xa0>
 8002656:	6921      	ldr	r1, [r4, #16]
 8002658:	464a      	mov	r2, r9
 800265a:	f7ff fed2 	bl	8002402 <memcpy>
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002668:	81a3      	strh	r3, [r4, #12]
 800266a:	6126      	str	r6, [r4, #16]
 800266c:	6165      	str	r5, [r4, #20]
 800266e:	444e      	add	r6, r9
 8002670:	eba5 0509 	sub.w	r5, r5, r9
 8002674:	6026      	str	r6, [r4, #0]
 8002676:	60a5      	str	r5, [r4, #8]
 8002678:	463e      	mov	r6, r7
 800267a:	42be      	cmp	r6, r7
 800267c:	d900      	bls.n	8002680 <__ssputs_r+0x70>
 800267e:	463e      	mov	r6, r7
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	4632      	mov	r2, r6
 8002684:	4641      	mov	r1, r8
 8002686:	f000 fcff 	bl	8003088 <memmove>
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	1b9b      	subs	r3, r3, r6
 800268e:	60a3      	str	r3, [r4, #8]
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	4433      	add	r3, r6
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	2000      	movs	r0, #0
 8002698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800269c:	462a      	mov	r2, r5
 800269e:	f000 fd3f 	bl	8003120 <_realloc_r>
 80026a2:	4606      	mov	r6, r0
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d1e0      	bne.n	800266a <__ssputs_r+0x5a>
 80026a8:	6921      	ldr	r1, [r4, #16]
 80026aa:	4650      	mov	r0, sl
 80026ac:	f7ff feb8 	bl	8002420 <_free_r>
 80026b0:	230c      	movs	r3, #12
 80026b2:	f8ca 3000 	str.w	r3, [sl]
 80026b6:	89a3      	ldrh	r3, [r4, #12]
 80026b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026bc:	81a3      	strh	r3, [r4, #12]
 80026be:	f04f 30ff 	mov.w	r0, #4294967295
 80026c2:	e7e9      	b.n	8002698 <__ssputs_r+0x88>

080026c4 <_svfiprintf_r>:
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c8:	4698      	mov	r8, r3
 80026ca:	898b      	ldrh	r3, [r1, #12]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	b09d      	sub	sp, #116	; 0x74
 80026d0:	4607      	mov	r7, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	4614      	mov	r4, r2
 80026d6:	d50e      	bpl.n	80026f6 <_svfiprintf_r+0x32>
 80026d8:	690b      	ldr	r3, [r1, #16]
 80026da:	b963      	cbnz	r3, 80026f6 <_svfiprintf_r+0x32>
 80026dc:	2140      	movs	r1, #64	; 0x40
 80026de:	f7ff ff0b 	bl	80024f8 <_malloc_r>
 80026e2:	6028      	str	r0, [r5, #0]
 80026e4:	6128      	str	r0, [r5, #16]
 80026e6:	b920      	cbnz	r0, 80026f2 <_svfiprintf_r+0x2e>
 80026e8:	230c      	movs	r3, #12
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	e0d0      	b.n	8002894 <_svfiprintf_r+0x1d0>
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	616b      	str	r3, [r5, #20]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9309      	str	r3, [sp, #36]	; 0x24
 80026fa:	2320      	movs	r3, #32
 80026fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002700:	f8cd 800c 	str.w	r8, [sp, #12]
 8002704:	2330      	movs	r3, #48	; 0x30
 8002706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80028ac <_svfiprintf_r+0x1e8>
 800270a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800270e:	f04f 0901 	mov.w	r9, #1
 8002712:	4623      	mov	r3, r4
 8002714:	469a      	mov	sl, r3
 8002716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800271a:	b10a      	cbz	r2, 8002720 <_svfiprintf_r+0x5c>
 800271c:	2a25      	cmp	r2, #37	; 0x25
 800271e:	d1f9      	bne.n	8002714 <_svfiprintf_r+0x50>
 8002720:	ebba 0b04 	subs.w	fp, sl, r4
 8002724:	d00b      	beq.n	800273e <_svfiprintf_r+0x7a>
 8002726:	465b      	mov	r3, fp
 8002728:	4622      	mov	r2, r4
 800272a:	4629      	mov	r1, r5
 800272c:	4638      	mov	r0, r7
 800272e:	f7ff ff6f 	bl	8002610 <__ssputs_r>
 8002732:	3001      	adds	r0, #1
 8002734:	f000 80a9 	beq.w	800288a <_svfiprintf_r+0x1c6>
 8002738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800273a:	445a      	add	r2, fp
 800273c:	9209      	str	r2, [sp, #36]	; 0x24
 800273e:	f89a 3000 	ldrb.w	r3, [sl]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80a1 	beq.w	800288a <_svfiprintf_r+0x1c6>
 8002748:	2300      	movs	r3, #0
 800274a:	f04f 32ff 	mov.w	r2, #4294967295
 800274e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002752:	f10a 0a01 	add.w	sl, sl, #1
 8002756:	9304      	str	r3, [sp, #16]
 8002758:	9307      	str	r3, [sp, #28]
 800275a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800275e:	931a      	str	r3, [sp, #104]	; 0x68
 8002760:	4654      	mov	r4, sl
 8002762:	2205      	movs	r2, #5
 8002764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002768:	4850      	ldr	r0, [pc, #320]	; (80028ac <_svfiprintf_r+0x1e8>)
 800276a:	f7fd fd51 	bl	8000210 <memchr>
 800276e:	9a04      	ldr	r2, [sp, #16]
 8002770:	b9d8      	cbnz	r0, 80027aa <_svfiprintf_r+0xe6>
 8002772:	06d0      	lsls	r0, r2, #27
 8002774:	bf44      	itt	mi
 8002776:	2320      	movmi	r3, #32
 8002778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800277c:	0711      	lsls	r1, r2, #28
 800277e:	bf44      	itt	mi
 8002780:	232b      	movmi	r3, #43	; 0x2b
 8002782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002786:	f89a 3000 	ldrb.w	r3, [sl]
 800278a:	2b2a      	cmp	r3, #42	; 0x2a
 800278c:	d015      	beq.n	80027ba <_svfiprintf_r+0xf6>
 800278e:	9a07      	ldr	r2, [sp, #28]
 8002790:	4654      	mov	r4, sl
 8002792:	2000      	movs	r0, #0
 8002794:	f04f 0c0a 	mov.w	ip, #10
 8002798:	4621      	mov	r1, r4
 800279a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800279e:	3b30      	subs	r3, #48	; 0x30
 80027a0:	2b09      	cmp	r3, #9
 80027a2:	d94d      	bls.n	8002840 <_svfiprintf_r+0x17c>
 80027a4:	b1b0      	cbz	r0, 80027d4 <_svfiprintf_r+0x110>
 80027a6:	9207      	str	r2, [sp, #28]
 80027a8:	e014      	b.n	80027d4 <_svfiprintf_r+0x110>
 80027aa:	eba0 0308 	sub.w	r3, r0, r8
 80027ae:	fa09 f303 	lsl.w	r3, r9, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	9304      	str	r3, [sp, #16]
 80027b6:	46a2      	mov	sl, r4
 80027b8:	e7d2      	b.n	8002760 <_svfiprintf_r+0x9c>
 80027ba:	9b03      	ldr	r3, [sp, #12]
 80027bc:	1d19      	adds	r1, r3, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	9103      	str	r1, [sp, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bfbb      	ittet	lt
 80027c6:	425b      	neglt	r3, r3
 80027c8:	f042 0202 	orrlt.w	r2, r2, #2
 80027cc:	9307      	strge	r3, [sp, #28]
 80027ce:	9307      	strlt	r3, [sp, #28]
 80027d0:	bfb8      	it	lt
 80027d2:	9204      	strlt	r2, [sp, #16]
 80027d4:	7823      	ldrb	r3, [r4, #0]
 80027d6:	2b2e      	cmp	r3, #46	; 0x2e
 80027d8:	d10c      	bne.n	80027f4 <_svfiprintf_r+0x130>
 80027da:	7863      	ldrb	r3, [r4, #1]
 80027dc:	2b2a      	cmp	r3, #42	; 0x2a
 80027de:	d134      	bne.n	800284a <_svfiprintf_r+0x186>
 80027e0:	9b03      	ldr	r3, [sp, #12]
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	9203      	str	r2, [sp, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bfb8      	it	lt
 80027ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80027f0:	3402      	adds	r4, #2
 80027f2:	9305      	str	r3, [sp, #20]
 80027f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80028bc <_svfiprintf_r+0x1f8>
 80027f8:	7821      	ldrb	r1, [r4, #0]
 80027fa:	2203      	movs	r2, #3
 80027fc:	4650      	mov	r0, sl
 80027fe:	f7fd fd07 	bl	8000210 <memchr>
 8002802:	b138      	cbz	r0, 8002814 <_svfiprintf_r+0x150>
 8002804:	9b04      	ldr	r3, [sp, #16]
 8002806:	eba0 000a 	sub.w	r0, r0, sl
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	4082      	lsls	r2, r0
 800280e:	4313      	orrs	r3, r2
 8002810:	3401      	adds	r4, #1
 8002812:	9304      	str	r3, [sp, #16]
 8002814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002818:	4825      	ldr	r0, [pc, #148]	; (80028b0 <_svfiprintf_r+0x1ec>)
 800281a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800281e:	2206      	movs	r2, #6
 8002820:	f7fd fcf6 	bl	8000210 <memchr>
 8002824:	2800      	cmp	r0, #0
 8002826:	d038      	beq.n	800289a <_svfiprintf_r+0x1d6>
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <_svfiprintf_r+0x1f0>)
 800282a:	bb1b      	cbnz	r3, 8002874 <_svfiprintf_r+0x1b0>
 800282c:	9b03      	ldr	r3, [sp, #12]
 800282e:	3307      	adds	r3, #7
 8002830:	f023 0307 	bic.w	r3, r3, #7
 8002834:	3308      	adds	r3, #8
 8002836:	9303      	str	r3, [sp, #12]
 8002838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800283a:	4433      	add	r3, r6
 800283c:	9309      	str	r3, [sp, #36]	; 0x24
 800283e:	e768      	b.n	8002712 <_svfiprintf_r+0x4e>
 8002840:	fb0c 3202 	mla	r2, ip, r2, r3
 8002844:	460c      	mov	r4, r1
 8002846:	2001      	movs	r0, #1
 8002848:	e7a6      	b.n	8002798 <_svfiprintf_r+0xd4>
 800284a:	2300      	movs	r3, #0
 800284c:	3401      	adds	r4, #1
 800284e:	9305      	str	r3, [sp, #20]
 8002850:	4619      	mov	r1, r3
 8002852:	f04f 0c0a 	mov.w	ip, #10
 8002856:	4620      	mov	r0, r4
 8002858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800285c:	3a30      	subs	r2, #48	; 0x30
 800285e:	2a09      	cmp	r2, #9
 8002860:	d903      	bls.n	800286a <_svfiprintf_r+0x1a6>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0c6      	beq.n	80027f4 <_svfiprintf_r+0x130>
 8002866:	9105      	str	r1, [sp, #20]
 8002868:	e7c4      	b.n	80027f4 <_svfiprintf_r+0x130>
 800286a:	fb0c 2101 	mla	r1, ip, r1, r2
 800286e:	4604      	mov	r4, r0
 8002870:	2301      	movs	r3, #1
 8002872:	e7f0      	b.n	8002856 <_svfiprintf_r+0x192>
 8002874:	ab03      	add	r3, sp, #12
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	462a      	mov	r2, r5
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <_svfiprintf_r+0x1f4>)
 800287c:	a904      	add	r1, sp, #16
 800287e:	4638      	mov	r0, r7
 8002880:	f3af 8000 	nop.w
 8002884:	1c42      	adds	r2, r0, #1
 8002886:	4606      	mov	r6, r0
 8002888:	d1d6      	bne.n	8002838 <_svfiprintf_r+0x174>
 800288a:	89ab      	ldrh	r3, [r5, #12]
 800288c:	065b      	lsls	r3, r3, #25
 800288e:	f53f af2d 	bmi.w	80026ec <_svfiprintf_r+0x28>
 8002892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002894:	b01d      	add	sp, #116	; 0x74
 8002896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800289a:	ab03      	add	r3, sp, #12
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	462a      	mov	r2, r5
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <_svfiprintf_r+0x1f4>)
 80028a2:	a904      	add	r1, sp, #16
 80028a4:	4638      	mov	r0, r7
 80028a6:	f000 f9bd 	bl	8002c24 <_printf_i>
 80028aa:	e7eb      	b.n	8002884 <_svfiprintf_r+0x1c0>
 80028ac:	08003c20 	.word	0x08003c20
 80028b0:	08003c2a 	.word	0x08003c2a
 80028b4:	00000000 	.word	0x00000000
 80028b8:	08002611 	.word	0x08002611
 80028bc:	08003c26 	.word	0x08003c26

080028c0 <__sfputc_r>:
 80028c0:	6893      	ldr	r3, [r2, #8]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	b410      	push	{r4}
 80028c8:	6093      	str	r3, [r2, #8]
 80028ca:	da08      	bge.n	80028de <__sfputc_r+0x1e>
 80028cc:	6994      	ldr	r4, [r2, #24]
 80028ce:	42a3      	cmp	r3, r4
 80028d0:	db01      	blt.n	80028d6 <__sfputc_r+0x16>
 80028d2:	290a      	cmp	r1, #10
 80028d4:	d103      	bne.n	80028de <__sfputc_r+0x1e>
 80028d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028da:	f7ff bc5c 	b.w	8002196 <__swbuf_r>
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	1c58      	adds	r0, r3, #1
 80028e2:	6010      	str	r0, [r2, #0]
 80028e4:	7019      	strb	r1, [r3, #0]
 80028e6:	4608      	mov	r0, r1
 80028e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <__sfputs_r>:
 80028ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f0:	4606      	mov	r6, r0
 80028f2:	460f      	mov	r7, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	18d5      	adds	r5, r2, r3
 80028f8:	42ac      	cmp	r4, r5
 80028fa:	d101      	bne.n	8002900 <__sfputs_r+0x12>
 80028fc:	2000      	movs	r0, #0
 80028fe:	e007      	b.n	8002910 <__sfputs_r+0x22>
 8002900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002904:	463a      	mov	r2, r7
 8002906:	4630      	mov	r0, r6
 8002908:	f7ff ffda 	bl	80028c0 <__sfputc_r>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d1f3      	bne.n	80028f8 <__sfputs_r+0xa>
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002914 <_vfiprintf_r>:
 8002914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002918:	460d      	mov	r5, r1
 800291a:	b09d      	sub	sp, #116	; 0x74
 800291c:	4614      	mov	r4, r2
 800291e:	4698      	mov	r8, r3
 8002920:	4606      	mov	r6, r0
 8002922:	b118      	cbz	r0, 800292c <_vfiprintf_r+0x18>
 8002924:	6a03      	ldr	r3, [r0, #32]
 8002926:	b90b      	cbnz	r3, 800292c <_vfiprintf_r+0x18>
 8002928:	f7ff fb2e 	bl	8001f88 <__sinit>
 800292c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800292e:	07d9      	lsls	r1, r3, #31
 8002930:	d405      	bmi.n	800293e <_vfiprintf_r+0x2a>
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	059a      	lsls	r2, r3, #22
 8002936:	d402      	bmi.n	800293e <_vfiprintf_r+0x2a>
 8002938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800293a:	f7ff fd58 	bl	80023ee <__retarget_lock_acquire_recursive>
 800293e:	89ab      	ldrh	r3, [r5, #12]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	d501      	bpl.n	8002948 <_vfiprintf_r+0x34>
 8002944:	692b      	ldr	r3, [r5, #16]
 8002946:	b99b      	cbnz	r3, 8002970 <_vfiprintf_r+0x5c>
 8002948:	4629      	mov	r1, r5
 800294a:	4630      	mov	r0, r6
 800294c:	f7ff fc60 	bl	8002210 <__swsetup_r>
 8002950:	b170      	cbz	r0, 8002970 <_vfiprintf_r+0x5c>
 8002952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002954:	07dc      	lsls	r4, r3, #31
 8002956:	d504      	bpl.n	8002962 <_vfiprintf_r+0x4e>
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	b01d      	add	sp, #116	; 0x74
 800295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002962:	89ab      	ldrh	r3, [r5, #12]
 8002964:	0598      	lsls	r0, r3, #22
 8002966:	d4f7      	bmi.n	8002958 <_vfiprintf_r+0x44>
 8002968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800296a:	f7ff fd41 	bl	80023f0 <__retarget_lock_release_recursive>
 800296e:	e7f3      	b.n	8002958 <_vfiprintf_r+0x44>
 8002970:	2300      	movs	r3, #0
 8002972:	9309      	str	r3, [sp, #36]	; 0x24
 8002974:	2320      	movs	r3, #32
 8002976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800297a:	f8cd 800c 	str.w	r8, [sp, #12]
 800297e:	2330      	movs	r3, #48	; 0x30
 8002980:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002b34 <_vfiprintf_r+0x220>
 8002984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002988:	f04f 0901 	mov.w	r9, #1
 800298c:	4623      	mov	r3, r4
 800298e:	469a      	mov	sl, r3
 8002990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002994:	b10a      	cbz	r2, 800299a <_vfiprintf_r+0x86>
 8002996:	2a25      	cmp	r2, #37	; 0x25
 8002998:	d1f9      	bne.n	800298e <_vfiprintf_r+0x7a>
 800299a:	ebba 0b04 	subs.w	fp, sl, r4
 800299e:	d00b      	beq.n	80029b8 <_vfiprintf_r+0xa4>
 80029a0:	465b      	mov	r3, fp
 80029a2:	4622      	mov	r2, r4
 80029a4:	4629      	mov	r1, r5
 80029a6:	4630      	mov	r0, r6
 80029a8:	f7ff ffa1 	bl	80028ee <__sfputs_r>
 80029ac:	3001      	adds	r0, #1
 80029ae:	f000 80a9 	beq.w	8002b04 <_vfiprintf_r+0x1f0>
 80029b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029b4:	445a      	add	r2, fp
 80029b6:	9209      	str	r2, [sp, #36]	; 0x24
 80029b8:	f89a 3000 	ldrb.w	r3, [sl]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a1 	beq.w	8002b04 <_vfiprintf_r+0x1f0>
 80029c2:	2300      	movs	r3, #0
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029cc:	f10a 0a01 	add.w	sl, sl, #1
 80029d0:	9304      	str	r3, [sp, #16]
 80029d2:	9307      	str	r3, [sp, #28]
 80029d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029d8:	931a      	str	r3, [sp, #104]	; 0x68
 80029da:	4654      	mov	r4, sl
 80029dc:	2205      	movs	r2, #5
 80029de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e2:	4854      	ldr	r0, [pc, #336]	; (8002b34 <_vfiprintf_r+0x220>)
 80029e4:	f7fd fc14 	bl	8000210 <memchr>
 80029e8:	9a04      	ldr	r2, [sp, #16]
 80029ea:	b9d8      	cbnz	r0, 8002a24 <_vfiprintf_r+0x110>
 80029ec:	06d1      	lsls	r1, r2, #27
 80029ee:	bf44      	itt	mi
 80029f0:	2320      	movmi	r3, #32
 80029f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029f6:	0713      	lsls	r3, r2, #28
 80029f8:	bf44      	itt	mi
 80029fa:	232b      	movmi	r3, #43	; 0x2b
 80029fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a00:	f89a 3000 	ldrb.w	r3, [sl]
 8002a04:	2b2a      	cmp	r3, #42	; 0x2a
 8002a06:	d015      	beq.n	8002a34 <_vfiprintf_r+0x120>
 8002a08:	9a07      	ldr	r2, [sp, #28]
 8002a0a:	4654      	mov	r4, sl
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f04f 0c0a 	mov.w	ip, #10
 8002a12:	4621      	mov	r1, r4
 8002a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d94d      	bls.n	8002aba <_vfiprintf_r+0x1a6>
 8002a1e:	b1b0      	cbz	r0, 8002a4e <_vfiprintf_r+0x13a>
 8002a20:	9207      	str	r2, [sp, #28]
 8002a22:	e014      	b.n	8002a4e <_vfiprintf_r+0x13a>
 8002a24:	eba0 0308 	sub.w	r3, r0, r8
 8002a28:	fa09 f303 	lsl.w	r3, r9, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	46a2      	mov	sl, r4
 8002a32:	e7d2      	b.n	80029da <_vfiprintf_r+0xc6>
 8002a34:	9b03      	ldr	r3, [sp, #12]
 8002a36:	1d19      	adds	r1, r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	9103      	str	r1, [sp, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bfbb      	ittet	lt
 8002a40:	425b      	neglt	r3, r3
 8002a42:	f042 0202 	orrlt.w	r2, r2, #2
 8002a46:	9307      	strge	r3, [sp, #28]
 8002a48:	9307      	strlt	r3, [sp, #28]
 8002a4a:	bfb8      	it	lt
 8002a4c:	9204      	strlt	r2, [sp, #16]
 8002a4e:	7823      	ldrb	r3, [r4, #0]
 8002a50:	2b2e      	cmp	r3, #46	; 0x2e
 8002a52:	d10c      	bne.n	8002a6e <_vfiprintf_r+0x15a>
 8002a54:	7863      	ldrb	r3, [r4, #1]
 8002a56:	2b2a      	cmp	r3, #42	; 0x2a
 8002a58:	d134      	bne.n	8002ac4 <_vfiprintf_r+0x1b0>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	9203      	str	r2, [sp, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a6a:	3402      	adds	r4, #2
 8002a6c:	9305      	str	r3, [sp, #20]
 8002a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002b44 <_vfiprintf_r+0x230>
 8002a72:	7821      	ldrb	r1, [r4, #0]
 8002a74:	2203      	movs	r2, #3
 8002a76:	4650      	mov	r0, sl
 8002a78:	f7fd fbca 	bl	8000210 <memchr>
 8002a7c:	b138      	cbz	r0, 8002a8e <_vfiprintf_r+0x17a>
 8002a7e:	9b04      	ldr	r3, [sp, #16]
 8002a80:	eba0 000a 	sub.w	r0, r0, sl
 8002a84:	2240      	movs	r2, #64	; 0x40
 8002a86:	4082      	lsls	r2, r0
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	3401      	adds	r4, #1
 8002a8c:	9304      	str	r3, [sp, #16]
 8002a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a92:	4829      	ldr	r0, [pc, #164]	; (8002b38 <_vfiprintf_r+0x224>)
 8002a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a98:	2206      	movs	r2, #6
 8002a9a:	f7fd fbb9 	bl	8000210 <memchr>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d03f      	beq.n	8002b22 <_vfiprintf_r+0x20e>
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <_vfiprintf_r+0x228>)
 8002aa4:	bb1b      	cbnz	r3, 8002aee <_vfiprintf_r+0x1da>
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	3308      	adds	r3, #8
 8002ab0:	9303      	str	r3, [sp, #12]
 8002ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab4:	443b      	add	r3, r7
 8002ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab8:	e768      	b.n	800298c <_vfiprintf_r+0x78>
 8002aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8002abe:	460c      	mov	r4, r1
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	e7a6      	b.n	8002a12 <_vfiprintf_r+0xfe>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	3401      	adds	r4, #1
 8002ac8:	9305      	str	r3, [sp, #20]
 8002aca:	4619      	mov	r1, r3
 8002acc:	f04f 0c0a 	mov.w	ip, #10
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ad6:	3a30      	subs	r2, #48	; 0x30
 8002ad8:	2a09      	cmp	r2, #9
 8002ada:	d903      	bls.n	8002ae4 <_vfiprintf_r+0x1d0>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0c6      	beq.n	8002a6e <_vfiprintf_r+0x15a>
 8002ae0:	9105      	str	r1, [sp, #20]
 8002ae2:	e7c4      	b.n	8002a6e <_vfiprintf_r+0x15a>
 8002ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ae8:	4604      	mov	r4, r0
 8002aea:	2301      	movs	r3, #1
 8002aec:	e7f0      	b.n	8002ad0 <_vfiprintf_r+0x1bc>
 8002aee:	ab03      	add	r3, sp, #12
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	462a      	mov	r2, r5
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <_vfiprintf_r+0x22c>)
 8002af6:	a904      	add	r1, sp, #16
 8002af8:	4630      	mov	r0, r6
 8002afa:	f3af 8000 	nop.w
 8002afe:	4607      	mov	r7, r0
 8002b00:	1c78      	adds	r0, r7, #1
 8002b02:	d1d6      	bne.n	8002ab2 <_vfiprintf_r+0x19e>
 8002b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b06:	07d9      	lsls	r1, r3, #31
 8002b08:	d405      	bmi.n	8002b16 <_vfiprintf_r+0x202>
 8002b0a:	89ab      	ldrh	r3, [r5, #12]
 8002b0c:	059a      	lsls	r2, r3, #22
 8002b0e:	d402      	bmi.n	8002b16 <_vfiprintf_r+0x202>
 8002b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b12:	f7ff fc6d 	bl	80023f0 <__retarget_lock_release_recursive>
 8002b16:	89ab      	ldrh	r3, [r5, #12]
 8002b18:	065b      	lsls	r3, r3, #25
 8002b1a:	f53f af1d 	bmi.w	8002958 <_vfiprintf_r+0x44>
 8002b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b20:	e71c      	b.n	800295c <_vfiprintf_r+0x48>
 8002b22:	ab03      	add	r3, sp, #12
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	462a      	mov	r2, r5
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <_vfiprintf_r+0x22c>)
 8002b2a:	a904      	add	r1, sp, #16
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	f000 f879 	bl	8002c24 <_printf_i>
 8002b32:	e7e4      	b.n	8002afe <_vfiprintf_r+0x1ea>
 8002b34:	08003c20 	.word	0x08003c20
 8002b38:	08003c2a 	.word	0x08003c2a
 8002b3c:	00000000 	.word	0x00000000
 8002b40:	080028ef 	.word	0x080028ef
 8002b44:	08003c26 	.word	0x08003c26

08002b48 <_printf_common>:
 8002b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	688a      	ldr	r2, [r1, #8]
 8002b52:	690b      	ldr	r3, [r1, #16]
 8002b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bfb8      	it	lt
 8002b5c:	4613      	movlt	r3, r2
 8002b5e:	6033      	str	r3, [r6, #0]
 8002b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b64:	4607      	mov	r7, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	b10a      	cbz	r2, 8002b6e <_printf_common+0x26>
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	0699      	lsls	r1, r3, #26
 8002b72:	bf42      	ittt	mi
 8002b74:	6833      	ldrmi	r3, [r6, #0]
 8002b76:	3302      	addmi	r3, #2
 8002b78:	6033      	strmi	r3, [r6, #0]
 8002b7a:	6825      	ldr	r5, [r4, #0]
 8002b7c:	f015 0506 	ands.w	r5, r5, #6
 8002b80:	d106      	bne.n	8002b90 <_printf_common+0x48>
 8002b82:	f104 0a19 	add.w	sl, r4, #25
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	6832      	ldr	r2, [r6, #0]
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	42ab      	cmp	r3, r5
 8002b8e:	dc26      	bgt.n	8002bde <_printf_common+0x96>
 8002b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b94:	1e13      	subs	r3, r2, #0
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	0692      	lsls	r2, r2, #26
 8002b9e:	d42b      	bmi.n	8002bf8 <_printf_common+0xb0>
 8002ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	47c0      	blx	r8
 8002baa:	3001      	adds	r0, #1
 8002bac:	d01e      	beq.n	8002bec <_printf_common+0xa4>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	6922      	ldr	r2, [r4, #16]
 8002bb2:	f003 0306 	and.w	r3, r3, #6
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf02      	ittt	eq
 8002bba:	68e5      	ldreq	r5, [r4, #12]
 8002bbc:	6833      	ldreq	r3, [r6, #0]
 8002bbe:	1aed      	subeq	r5, r5, r3
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	bf0c      	ite	eq
 8002bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bc8:	2500      	movne	r5, #0
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	bfc4      	itt	gt
 8002bce:	1a9b      	subgt	r3, r3, r2
 8002bd0:	18ed      	addgt	r5, r5, r3
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	341a      	adds	r4, #26
 8002bd6:	42b5      	cmp	r5, r6
 8002bd8:	d11a      	bne.n	8002c10 <_printf_common+0xc8>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e008      	b.n	8002bf0 <_printf_common+0xa8>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4652      	mov	r2, sl
 8002be2:	4649      	mov	r1, r9
 8002be4:	4638      	mov	r0, r7
 8002be6:	47c0      	blx	r8
 8002be8:	3001      	adds	r0, #1
 8002bea:	d103      	bne.n	8002bf4 <_printf_common+0xac>
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf4:	3501      	adds	r5, #1
 8002bf6:	e7c6      	b.n	8002b86 <_printf_common+0x3e>
 8002bf8:	18e1      	adds	r1, r4, r3
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	2030      	movs	r0, #48	; 0x30
 8002bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c02:	4422      	add	r2, r4
 8002c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	e7c7      	b.n	8002ba0 <_printf_common+0x58>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4622      	mov	r2, r4
 8002c14:	4649      	mov	r1, r9
 8002c16:	4638      	mov	r0, r7
 8002c18:	47c0      	blx	r8
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d0e6      	beq.n	8002bec <_printf_common+0xa4>
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7d9      	b.n	8002bd6 <_printf_common+0x8e>
	...

08002c24 <_printf_i>:
 8002c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	7e0f      	ldrb	r7, [r1, #24]
 8002c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c2c:	2f78      	cmp	r7, #120	; 0x78
 8002c2e:	4691      	mov	r9, r2
 8002c30:	4680      	mov	r8, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	469a      	mov	sl, r3
 8002c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c3a:	d807      	bhi.n	8002c4c <_printf_i+0x28>
 8002c3c:	2f62      	cmp	r7, #98	; 0x62
 8002c3e:	d80a      	bhi.n	8002c56 <_printf_i+0x32>
 8002c40:	2f00      	cmp	r7, #0
 8002c42:	f000 80d4 	beq.w	8002dee <_printf_i+0x1ca>
 8002c46:	2f58      	cmp	r7, #88	; 0x58
 8002c48:	f000 80c0 	beq.w	8002dcc <_printf_i+0x1a8>
 8002c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c54:	e03a      	b.n	8002ccc <_printf_i+0xa8>
 8002c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c5a:	2b15      	cmp	r3, #21
 8002c5c:	d8f6      	bhi.n	8002c4c <_printf_i+0x28>
 8002c5e:	a101      	add	r1, pc, #4	; (adr r1, 8002c64 <_printf_i+0x40>)
 8002c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c64:	08002cbd 	.word	0x08002cbd
 8002c68:	08002cd1 	.word	0x08002cd1
 8002c6c:	08002c4d 	.word	0x08002c4d
 8002c70:	08002c4d 	.word	0x08002c4d
 8002c74:	08002c4d 	.word	0x08002c4d
 8002c78:	08002c4d 	.word	0x08002c4d
 8002c7c:	08002cd1 	.word	0x08002cd1
 8002c80:	08002c4d 	.word	0x08002c4d
 8002c84:	08002c4d 	.word	0x08002c4d
 8002c88:	08002c4d 	.word	0x08002c4d
 8002c8c:	08002c4d 	.word	0x08002c4d
 8002c90:	08002dd5 	.word	0x08002dd5
 8002c94:	08002cfd 	.word	0x08002cfd
 8002c98:	08002d8f 	.word	0x08002d8f
 8002c9c:	08002c4d 	.word	0x08002c4d
 8002ca0:	08002c4d 	.word	0x08002c4d
 8002ca4:	08002df7 	.word	0x08002df7
 8002ca8:	08002c4d 	.word	0x08002c4d
 8002cac:	08002cfd 	.word	0x08002cfd
 8002cb0:	08002c4d 	.word	0x08002c4d
 8002cb4:	08002c4d 	.word	0x08002c4d
 8002cb8:	08002d97 	.word	0x08002d97
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	602a      	str	r2, [r5, #0]
 8002cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e09f      	b.n	8002e10 <_printf_i+0x1ec>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	0607      	lsls	r7, r0, #24
 8002cd6:	f103 0104 	add.w	r1, r3, #4
 8002cda:	6029      	str	r1, [r5, #0]
 8002cdc:	d501      	bpl.n	8002ce2 <_printf_i+0xbe>
 8002cde:	681e      	ldr	r6, [r3, #0]
 8002ce0:	e003      	b.n	8002cea <_printf_i+0xc6>
 8002ce2:	0646      	lsls	r6, r0, #25
 8002ce4:	d5fb      	bpl.n	8002cde <_printf_i+0xba>
 8002ce6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	da03      	bge.n	8002cf6 <_printf_i+0xd2>
 8002cee:	232d      	movs	r3, #45	; 0x2d
 8002cf0:	4276      	negs	r6, r6
 8002cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf6:	485a      	ldr	r0, [pc, #360]	; (8002e60 <_printf_i+0x23c>)
 8002cf8:	230a      	movs	r3, #10
 8002cfa:	e012      	b.n	8002d22 <_printf_i+0xfe>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	1d19      	adds	r1, r3, #4
 8002d02:	6029      	str	r1, [r5, #0]
 8002d04:	0605      	lsls	r5, r0, #24
 8002d06:	d501      	bpl.n	8002d0c <_printf_i+0xe8>
 8002d08:	681e      	ldr	r6, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <_printf_i+0xee>
 8002d0c:	0641      	lsls	r1, r0, #25
 8002d0e:	d5fb      	bpl.n	8002d08 <_printf_i+0xe4>
 8002d10:	881e      	ldrh	r6, [r3, #0]
 8002d12:	4853      	ldr	r0, [pc, #332]	; (8002e60 <_printf_i+0x23c>)
 8002d14:	2f6f      	cmp	r7, #111	; 0x6f
 8002d16:	bf0c      	ite	eq
 8002d18:	2308      	moveq	r3, #8
 8002d1a:	230a      	movne	r3, #10
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d22:	6865      	ldr	r5, [r4, #4]
 8002d24:	60a5      	str	r5, [r4, #8]
 8002d26:	2d00      	cmp	r5, #0
 8002d28:	bfa2      	ittt	ge
 8002d2a:	6821      	ldrge	r1, [r4, #0]
 8002d2c:	f021 0104 	bicge.w	r1, r1, #4
 8002d30:	6021      	strge	r1, [r4, #0]
 8002d32:	b90e      	cbnz	r6, 8002d38 <_printf_i+0x114>
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d04b      	beq.n	8002dd0 <_printf_i+0x1ac>
 8002d38:	4615      	mov	r5, r2
 8002d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d42:	5dc7      	ldrb	r7, [r0, r7]
 8002d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d48:	4637      	mov	r7, r6
 8002d4a:	42bb      	cmp	r3, r7
 8002d4c:	460e      	mov	r6, r1
 8002d4e:	d9f4      	bls.n	8002d3a <_printf_i+0x116>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d10b      	bne.n	8002d6c <_printf_i+0x148>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	07de      	lsls	r6, r3, #31
 8002d58:	d508      	bpl.n	8002d6c <_printf_i+0x148>
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	6861      	ldr	r1, [r4, #4]
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	bfde      	ittt	le
 8002d62:	2330      	movle	r3, #48	; 0x30
 8002d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d6c:	1b52      	subs	r2, r2, r5
 8002d6e:	6122      	str	r2, [r4, #16]
 8002d70:	f8cd a000 	str.w	sl, [sp]
 8002d74:	464b      	mov	r3, r9
 8002d76:	aa03      	add	r2, sp, #12
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	f7ff fee4 	bl	8002b48 <_printf_common>
 8002d80:	3001      	adds	r0, #1
 8002d82:	d14a      	bne.n	8002e1a <_printf_i+0x1f6>
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	b004      	add	sp, #16
 8002d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	4833      	ldr	r0, [pc, #204]	; (8002e64 <_printf_i+0x240>)
 8002d98:	2778      	movs	r7, #120	; 0x78
 8002d9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	6829      	ldr	r1, [r5, #0]
 8002da2:	061f      	lsls	r7, r3, #24
 8002da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002da8:	d402      	bmi.n	8002db0 <_printf_i+0x18c>
 8002daa:	065f      	lsls	r7, r3, #25
 8002dac:	bf48      	it	mi
 8002dae:	b2b6      	uxthmi	r6, r6
 8002db0:	07df      	lsls	r7, r3, #31
 8002db2:	bf48      	it	mi
 8002db4:	f043 0320 	orrmi.w	r3, r3, #32
 8002db8:	6029      	str	r1, [r5, #0]
 8002dba:	bf48      	it	mi
 8002dbc:	6023      	strmi	r3, [r4, #0]
 8002dbe:	b91e      	cbnz	r6, 8002dc8 <_printf_i+0x1a4>
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f023 0320 	bic.w	r3, r3, #32
 8002dc6:	6023      	str	r3, [r4, #0]
 8002dc8:	2310      	movs	r3, #16
 8002dca:	e7a7      	b.n	8002d1c <_printf_i+0xf8>
 8002dcc:	4824      	ldr	r0, [pc, #144]	; (8002e60 <_printf_i+0x23c>)
 8002dce:	e7e4      	b.n	8002d9a <_printf_i+0x176>
 8002dd0:	4615      	mov	r5, r2
 8002dd2:	e7bd      	b.n	8002d50 <_printf_i+0x12c>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	6826      	ldr	r6, [r4, #0]
 8002dd8:	6961      	ldr	r1, [r4, #20]
 8002dda:	1d18      	adds	r0, r3, #4
 8002ddc:	6028      	str	r0, [r5, #0]
 8002dde:	0635      	lsls	r5, r6, #24
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	d501      	bpl.n	8002de8 <_printf_i+0x1c4>
 8002de4:	6019      	str	r1, [r3, #0]
 8002de6:	e002      	b.n	8002dee <_printf_i+0x1ca>
 8002de8:	0670      	lsls	r0, r6, #25
 8002dea:	d5fb      	bpl.n	8002de4 <_printf_i+0x1c0>
 8002dec:	8019      	strh	r1, [r3, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	6123      	str	r3, [r4, #16]
 8002df2:	4615      	mov	r5, r2
 8002df4:	e7bc      	b.n	8002d70 <_printf_i+0x14c>
 8002df6:	682b      	ldr	r3, [r5, #0]
 8002df8:	1d1a      	adds	r2, r3, #4
 8002dfa:	602a      	str	r2, [r5, #0]
 8002dfc:	681d      	ldr	r5, [r3, #0]
 8002dfe:	6862      	ldr	r2, [r4, #4]
 8002e00:	2100      	movs	r1, #0
 8002e02:	4628      	mov	r0, r5
 8002e04:	f7fd fa04 	bl	8000210 <memchr>
 8002e08:	b108      	cbz	r0, 8002e0e <_printf_i+0x1ea>
 8002e0a:	1b40      	subs	r0, r0, r5
 8002e0c:	6060      	str	r0, [r4, #4]
 8002e0e:	6863      	ldr	r3, [r4, #4]
 8002e10:	6123      	str	r3, [r4, #16]
 8002e12:	2300      	movs	r3, #0
 8002e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e18:	e7aa      	b.n	8002d70 <_printf_i+0x14c>
 8002e1a:	6923      	ldr	r3, [r4, #16]
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	4649      	mov	r1, r9
 8002e20:	4640      	mov	r0, r8
 8002e22:	47d0      	blx	sl
 8002e24:	3001      	adds	r0, #1
 8002e26:	d0ad      	beq.n	8002d84 <_printf_i+0x160>
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	079b      	lsls	r3, r3, #30
 8002e2c:	d413      	bmi.n	8002e56 <_printf_i+0x232>
 8002e2e:	68e0      	ldr	r0, [r4, #12]
 8002e30:	9b03      	ldr	r3, [sp, #12]
 8002e32:	4298      	cmp	r0, r3
 8002e34:	bfb8      	it	lt
 8002e36:	4618      	movlt	r0, r3
 8002e38:	e7a6      	b.n	8002d88 <_printf_i+0x164>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4632      	mov	r2, r6
 8002e3e:	4649      	mov	r1, r9
 8002e40:	4640      	mov	r0, r8
 8002e42:	47d0      	blx	sl
 8002e44:	3001      	adds	r0, #1
 8002e46:	d09d      	beq.n	8002d84 <_printf_i+0x160>
 8002e48:	3501      	adds	r5, #1
 8002e4a:	68e3      	ldr	r3, [r4, #12]
 8002e4c:	9903      	ldr	r1, [sp, #12]
 8002e4e:	1a5b      	subs	r3, r3, r1
 8002e50:	42ab      	cmp	r3, r5
 8002e52:	dcf2      	bgt.n	8002e3a <_printf_i+0x216>
 8002e54:	e7eb      	b.n	8002e2e <_printf_i+0x20a>
 8002e56:	2500      	movs	r5, #0
 8002e58:	f104 0619 	add.w	r6, r4, #25
 8002e5c:	e7f5      	b.n	8002e4a <_printf_i+0x226>
 8002e5e:	bf00      	nop
 8002e60:	08003c31 	.word	0x08003c31
 8002e64:	08003c42 	.word	0x08003c42

08002e68 <__sflush_r>:
 8002e68:	898a      	ldrh	r2, [r1, #12]
 8002e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6e:	4605      	mov	r5, r0
 8002e70:	0710      	lsls	r0, r2, #28
 8002e72:	460c      	mov	r4, r1
 8002e74:	d458      	bmi.n	8002f28 <__sflush_r+0xc0>
 8002e76:	684b      	ldr	r3, [r1, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	dc05      	bgt.n	8002e88 <__sflush_r+0x20>
 8002e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dc02      	bgt.n	8002e88 <__sflush_r+0x20>
 8002e82:	2000      	movs	r0, #0
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e8a:	2e00      	cmp	r6, #0
 8002e8c:	d0f9      	beq.n	8002e82 <__sflush_r+0x1a>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e94:	682f      	ldr	r7, [r5, #0]
 8002e96:	6a21      	ldr	r1, [r4, #32]
 8002e98:	602b      	str	r3, [r5, #0]
 8002e9a:	d032      	beq.n	8002f02 <__sflush_r+0x9a>
 8002e9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	075a      	lsls	r2, r3, #29
 8002ea2:	d505      	bpl.n	8002eb0 <__sflush_r+0x48>
 8002ea4:	6863      	ldr	r3, [r4, #4]
 8002ea6:	1ac0      	subs	r0, r0, r3
 8002ea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eaa:	b10b      	cbz	r3, 8002eb0 <__sflush_r+0x48>
 8002eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eae:	1ac0      	subs	r0, r0, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eb6:	6a21      	ldr	r1, [r4, #32]
 8002eb8:	4628      	mov	r0, r5
 8002eba:	47b0      	blx	r6
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	d106      	bne.n	8002ed0 <__sflush_r+0x68>
 8002ec2:	6829      	ldr	r1, [r5, #0]
 8002ec4:	291d      	cmp	r1, #29
 8002ec6:	d82b      	bhi.n	8002f20 <__sflush_r+0xb8>
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <__sflush_r+0x108>)
 8002eca:	410a      	asrs	r2, r1
 8002ecc:	07d6      	lsls	r6, r2, #31
 8002ece:	d427      	bmi.n	8002f20 <__sflush_r+0xb8>
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6062      	str	r2, [r4, #4]
 8002ed4:	04d9      	lsls	r1, r3, #19
 8002ed6:	6922      	ldr	r2, [r4, #16]
 8002ed8:	6022      	str	r2, [r4, #0]
 8002eda:	d504      	bpl.n	8002ee6 <__sflush_r+0x7e>
 8002edc:	1c42      	adds	r2, r0, #1
 8002ede:	d101      	bne.n	8002ee4 <__sflush_r+0x7c>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	b903      	cbnz	r3, 8002ee6 <__sflush_r+0x7e>
 8002ee4:	6560      	str	r0, [r4, #84]	; 0x54
 8002ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee8:	602f      	str	r7, [r5, #0]
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d0c9      	beq.n	8002e82 <__sflush_r+0x1a>
 8002eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d002      	beq.n	8002efc <__sflush_r+0x94>
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f7ff fa92 	bl	8002420 <_free_r>
 8002efc:	2000      	movs	r0, #0
 8002efe:	6360      	str	r0, [r4, #52]	; 0x34
 8002f00:	e7c0      	b.n	8002e84 <__sflush_r+0x1c>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4628      	mov	r0, r5
 8002f06:	47b0      	blx	r6
 8002f08:	1c41      	adds	r1, r0, #1
 8002f0a:	d1c8      	bne.n	8002e9e <__sflush_r+0x36>
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0c5      	beq.n	8002e9e <__sflush_r+0x36>
 8002f12:	2b1d      	cmp	r3, #29
 8002f14:	d001      	beq.n	8002f1a <__sflush_r+0xb2>
 8002f16:	2b16      	cmp	r3, #22
 8002f18:	d101      	bne.n	8002f1e <__sflush_r+0xb6>
 8002f1a:	602f      	str	r7, [r5, #0]
 8002f1c:	e7b1      	b.n	8002e82 <__sflush_r+0x1a>
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	e7ad      	b.n	8002e84 <__sflush_r+0x1c>
 8002f28:	690f      	ldr	r7, [r1, #16]
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d0a9      	beq.n	8002e82 <__sflush_r+0x1a>
 8002f2e:	0793      	lsls	r3, r2, #30
 8002f30:	680e      	ldr	r6, [r1, #0]
 8002f32:	bf08      	it	eq
 8002f34:	694b      	ldreq	r3, [r1, #20]
 8002f36:	600f      	str	r7, [r1, #0]
 8002f38:	bf18      	it	ne
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	eba6 0807 	sub.w	r8, r6, r7
 8002f40:	608b      	str	r3, [r1, #8]
 8002f42:	f1b8 0f00 	cmp.w	r8, #0
 8002f46:	dd9c      	ble.n	8002e82 <__sflush_r+0x1a>
 8002f48:	6a21      	ldr	r1, [r4, #32]
 8002f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	463a      	mov	r2, r7
 8002f50:	4628      	mov	r0, r5
 8002f52:	47b0      	blx	r6
 8002f54:	2800      	cmp	r0, #0
 8002f56:	dc06      	bgt.n	8002f66 <__sflush_r+0xfe>
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f5e:	81a3      	strh	r3, [r4, #12]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	e78e      	b.n	8002e84 <__sflush_r+0x1c>
 8002f66:	4407      	add	r7, r0
 8002f68:	eba8 0800 	sub.w	r8, r8, r0
 8002f6c:	e7e9      	b.n	8002f42 <__sflush_r+0xda>
 8002f6e:	bf00      	nop
 8002f70:	dfbffffe 	.word	0xdfbffffe

08002f74 <_fflush_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	690b      	ldr	r3, [r1, #16]
 8002f78:	4605      	mov	r5, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	b913      	cbnz	r3, 8002f84 <_fflush_r+0x10>
 8002f7e:	2500      	movs	r5, #0
 8002f80:	4628      	mov	r0, r5
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	b118      	cbz	r0, 8002f8e <_fflush_r+0x1a>
 8002f86:	6a03      	ldr	r3, [r0, #32]
 8002f88:	b90b      	cbnz	r3, 8002f8e <_fflush_r+0x1a>
 8002f8a:	f7fe fffd 	bl	8001f88 <__sinit>
 8002f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f3      	beq.n	8002f7e <_fflush_r+0xa>
 8002f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f98:	07d0      	lsls	r0, r2, #31
 8002f9a:	d404      	bmi.n	8002fa6 <_fflush_r+0x32>
 8002f9c:	0599      	lsls	r1, r3, #22
 8002f9e:	d402      	bmi.n	8002fa6 <_fflush_r+0x32>
 8002fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa2:	f7ff fa24 	bl	80023ee <__retarget_lock_acquire_recursive>
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	4621      	mov	r1, r4
 8002faa:	f7ff ff5d 	bl	8002e68 <__sflush_r>
 8002fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fb0:	07da      	lsls	r2, r3, #31
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	d4e4      	bmi.n	8002f80 <_fflush_r+0xc>
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	059b      	lsls	r3, r3, #22
 8002fba:	d4e1      	bmi.n	8002f80 <_fflush_r+0xc>
 8002fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fbe:	f7ff fa17 	bl	80023f0 <__retarget_lock_release_recursive>
 8002fc2:	e7dd      	b.n	8002f80 <_fflush_r+0xc>

08002fc4 <__swhatbuf_r>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	b096      	sub	sp, #88	; 0x58
 8002fd0:	4615      	mov	r5, r2
 8002fd2:	461e      	mov	r6, r3
 8002fd4:	da0d      	bge.n	8002ff2 <__swhatbuf_r+0x2e>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002fe6:	2340      	movne	r3, #64	; 0x40
 8002fe8:	2000      	movs	r0, #0
 8002fea:	6031      	str	r1, [r6, #0]
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	b016      	add	sp, #88	; 0x58
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
 8002ff2:	466a      	mov	r2, sp
 8002ff4:	f000 f862 	bl	80030bc <_fstat_r>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	dbec      	blt.n	8002fd6 <__swhatbuf_r+0x12>
 8002ffc:	9901      	ldr	r1, [sp, #4]
 8002ffe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003002:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003006:	4259      	negs	r1, r3
 8003008:	4159      	adcs	r1, r3
 800300a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300e:	e7eb      	b.n	8002fe8 <__swhatbuf_r+0x24>

08003010 <__smakebuf_r>:
 8003010:	898b      	ldrh	r3, [r1, #12]
 8003012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003014:	079d      	lsls	r5, r3, #30
 8003016:	4606      	mov	r6, r0
 8003018:	460c      	mov	r4, r1
 800301a:	d507      	bpl.n	800302c <__smakebuf_r+0x1c>
 800301c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	6123      	str	r3, [r4, #16]
 8003024:	2301      	movs	r3, #1
 8003026:	6163      	str	r3, [r4, #20]
 8003028:	b002      	add	sp, #8
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	ab01      	add	r3, sp, #4
 800302e:	466a      	mov	r2, sp
 8003030:	f7ff ffc8 	bl	8002fc4 <__swhatbuf_r>
 8003034:	9900      	ldr	r1, [sp, #0]
 8003036:	4605      	mov	r5, r0
 8003038:	4630      	mov	r0, r6
 800303a:	f7ff fa5d 	bl	80024f8 <_malloc_r>
 800303e:	b948      	cbnz	r0, 8003054 <__smakebuf_r+0x44>
 8003040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003044:	059a      	lsls	r2, r3, #22
 8003046:	d4ef      	bmi.n	8003028 <__smakebuf_r+0x18>
 8003048:	f023 0303 	bic.w	r3, r3, #3
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	e7e3      	b.n	800301c <__smakebuf_r+0xc>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	9b00      	ldr	r3, [sp, #0]
 8003060:	6163      	str	r3, [r4, #20]
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	6120      	str	r0, [r4, #16]
 8003066:	b15b      	cbz	r3, 8003080 <__smakebuf_r+0x70>
 8003068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f837 	bl	80030e0 <_isatty_r>
 8003072:	b128      	cbz	r0, 8003080 <__smakebuf_r+0x70>
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	81a3      	strh	r3, [r4, #12]
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	431d      	orrs	r5, r3
 8003084:	81a5      	strh	r5, [r4, #12]
 8003086:	e7cf      	b.n	8003028 <__smakebuf_r+0x18>

08003088 <memmove>:
 8003088:	4288      	cmp	r0, r1
 800308a:	b510      	push	{r4, lr}
 800308c:	eb01 0402 	add.w	r4, r1, r2
 8003090:	d902      	bls.n	8003098 <memmove+0x10>
 8003092:	4284      	cmp	r4, r0
 8003094:	4623      	mov	r3, r4
 8003096:	d807      	bhi.n	80030a8 <memmove+0x20>
 8003098:	1e43      	subs	r3, r0, #1
 800309a:	42a1      	cmp	r1, r4
 800309c:	d008      	beq.n	80030b0 <memmove+0x28>
 800309e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030a6:	e7f8      	b.n	800309a <memmove+0x12>
 80030a8:	4402      	add	r2, r0
 80030aa:	4601      	mov	r1, r0
 80030ac:	428a      	cmp	r2, r1
 80030ae:	d100      	bne.n	80030b2 <memmove+0x2a>
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030ba:	e7f7      	b.n	80030ac <memmove+0x24>

080030bc <_fstat_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4d07      	ldr	r5, [pc, #28]	; (80030dc <_fstat_r+0x20>)
 80030c0:	2300      	movs	r3, #0
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	f7fe fe20 	bl	8001d0e <_fstat>
 80030ce:	1c43      	adds	r3, r0, #1
 80030d0:	d102      	bne.n	80030d8 <_fstat_r+0x1c>
 80030d2:	682b      	ldr	r3, [r5, #0]
 80030d4:	b103      	cbz	r3, 80030d8 <_fstat_r+0x1c>
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	bf00      	nop
 80030dc:	200006a4 	.word	0x200006a4

080030e0 <_isatty_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	4d06      	ldr	r5, [pc, #24]	; (80030fc <_isatty_r+0x1c>)
 80030e4:	2300      	movs	r3, #0
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7fe fe1f 	bl	8001d2e <_isatty>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d102      	bne.n	80030fa <_isatty_r+0x1a>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	b103      	cbz	r3, 80030fa <_isatty_r+0x1a>
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
 80030fc:	200006a4 	.word	0x200006a4

08003100 <_sbrk_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4d06      	ldr	r5, [pc, #24]	; (800311c <_sbrk_r+0x1c>)
 8003104:	2300      	movs	r3, #0
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	602b      	str	r3, [r5, #0]
 800310c:	f7fe fe28 	bl	8001d60 <_sbrk>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_sbrk_r+0x1a>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	b103      	cbz	r3, 800311a <_sbrk_r+0x1a>
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	200006a4 	.word	0x200006a4

08003120 <_realloc_r>:
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	4680      	mov	r8, r0
 8003126:	4614      	mov	r4, r2
 8003128:	460e      	mov	r6, r1
 800312a:	b921      	cbnz	r1, 8003136 <_realloc_r+0x16>
 800312c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003130:	4611      	mov	r1, r2
 8003132:	f7ff b9e1 	b.w	80024f8 <_malloc_r>
 8003136:	b92a      	cbnz	r2, 8003144 <_realloc_r+0x24>
 8003138:	f7ff f972 	bl	8002420 <_free_r>
 800313c:	4625      	mov	r5, r4
 800313e:	4628      	mov	r0, r5
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003144:	f000 f81b 	bl	800317e <_malloc_usable_size_r>
 8003148:	4284      	cmp	r4, r0
 800314a:	4607      	mov	r7, r0
 800314c:	d802      	bhi.n	8003154 <_realloc_r+0x34>
 800314e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003152:	d812      	bhi.n	800317a <_realloc_r+0x5a>
 8003154:	4621      	mov	r1, r4
 8003156:	4640      	mov	r0, r8
 8003158:	f7ff f9ce 	bl	80024f8 <_malloc_r>
 800315c:	4605      	mov	r5, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d0ed      	beq.n	800313e <_realloc_r+0x1e>
 8003162:	42bc      	cmp	r4, r7
 8003164:	4622      	mov	r2, r4
 8003166:	4631      	mov	r1, r6
 8003168:	bf28      	it	cs
 800316a:	463a      	movcs	r2, r7
 800316c:	f7ff f949 	bl	8002402 <memcpy>
 8003170:	4631      	mov	r1, r6
 8003172:	4640      	mov	r0, r8
 8003174:	f7ff f954 	bl	8002420 <_free_r>
 8003178:	e7e1      	b.n	800313e <_realloc_r+0x1e>
 800317a:	4635      	mov	r5, r6
 800317c:	e7df      	b.n	800313e <_realloc_r+0x1e>

0800317e <_malloc_usable_size_r>:
 800317e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003182:	1f18      	subs	r0, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfbc      	itt	lt
 8003188:	580b      	ldrlt	r3, [r1, r0]
 800318a:	18c0      	addlt	r0, r0, r3
 800318c:	4770      	bx	lr
	...

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
